ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = rep(x = 16, times = 5), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish", "Willapa Bay"), col = c('red', 'blue', 'magenta', 'green', 'black'), cex = 0.5)
pdf("analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-11-28-Protein-Abundance-NMDS-Ellipse.pdf", width = 11, height = 8.5)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices = c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
text(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color) #Add oyster sample IDs to NMDS and color-code by site distinction
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = rep(x = 16, times = 5), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish", "Willapa Bay"), col = c('red', 'blue', 'magenta', 'green', 'black'), cex = 0.5, bty = "n")
dev.off()
#jpeg(filename = "2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-NMDS-Analysis-Averaged.jpeg", width = 1000, height = 750)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "red") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "blue") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "magenta") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "green") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "black") #Add confidence ellipse around the oyster samples from Willapa Bay
#Create a color and shape palette
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Colors <- c(rep(x = "#00A9BD", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "#38001C", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "#440D82", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "#017A74", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "#EB8B0C", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
NMDSColorShapeCustomization[,6] <- NMDS.Colors #Add the color vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Eelgrass.Condition),] #Reorder so eelgrass condition is sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Shapes <- c(rep(x = 1, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Bare")),
rep(x = 16, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Eelgrass"))) #Make a shape vector
NMDSColorShapeCustomization[,7] <- NMDS.Shapes #Add the shape vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Sample.Number),] #Resort by sample number
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
colnames(NMDSColorShapeCustomization) <- c("Sample.Number", "Site", "Eelgrass.Condition", "Region", "Region.Shape", "Color", "Shape") #Change column names
head(NMDSColorShapeCustomization) #Confirm changes
tail(NMDSColorShapeCustomization) #Confirm changes
#jpeg(filename = "2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-NMDS-Analysis-Averaged.jpeg", width = 1000, height = 750)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "red") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "blue") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "magenta") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "green") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "black") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = c(rep(x = 16, times = 6), 17), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('red', 'blue', 'black', 'green', 'magenta', 'black', 'black'), cex = 0.5)
#jpeg(filename = "2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-NMDS-Analysis-Averaged.jpeg", width = 1000, height = 750)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = c(rep(x = 16, times = 6), 17), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('red', 'blue', 'black', 'green', 'magenta', 'black', 'black'), cex = 0.5, bty = "n")
pdf("analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-11-28-Protein-Abundance-NMDS-Ellipse.pdf", width = 11, height = 8.5)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices = c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
text(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color) #Add oyster sample IDs to NMDS and color-code by site distinction
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = rep(x = 16, times = 5), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish", "Willapa Bay"), col = c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C'), cex = 0.5, bty = "n")
dev.off()
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = c(rep(x = 16, times = 6), 17), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', 'black', 'black'), cex = 0.5, bty = "n")
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = c(rep(x = 1, times = 6), 16), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', 'black', 'black'), cex = 0.5, bty = "n")
pdf("analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-11-28-Protein-Abundance-Site-Habitat-NMDS-Ellipse.pdf", width = 11, height = 8.5)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the oyster samples from Case Inlet
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the oyster samples from Fidalgo Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the oyster samples from Port Gamble Bay
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the oyster samples from Skokomish River Delta
ordiellipse(proc.nmds.averaged.euclidean, NMDSColorShapeCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the oyster samples from Willapa Bay
legend("topright", pch = c(rep(x = 1, times = 6), 16), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', 'black', 'black'), cex = 0.5, bty = "n")
dev.off()
knitr::opts_chunk$set(echo = TRUE) #Set up R Markdown File
#install.packages("vegan")
require(vegan)
#install.packages("cluster") #Install cluster package. This package has the function daisy that is used for the gower dissimilarity matrix.
require(cluster)
#install.packages("dplyr")
require(dplyr)
#install.packages("dplyr")
require(dplyr)
source("../../biostats.R") #Biostats analysis wrapper
sessionInfo() #Obtain session information
proteinAbundance <- read.csv("2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import protein abundance data
row.names(proteinAbundance) <- proteinAbundance[,1] #Assign first column as rownames
proteinAbundance <- proteinAbundance[,-1] #Remove first column
proteinAbundance <- t(proteinAbundance) #Transpose dataframe
head(proteinAbundance) #Confirm changes
proteinAbundanceHT <- data.trans(proteinAbundance, method = 'hellingers', plot = FALSE) #Hellinger (asymmetric) transformation
head(proteinAbundanceHT) #Confirm transformation
pHData <- read.csv("../../2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2018-11-18-pH-Tide-Data-Corrected.csv", header = TRUE) #Import pH data
pHData <- pHData[,-1] #Remove extra first column
head(pHData) #Confirm import
colnames(pHData)
pHMeanVariance <- data.frame("Site-Habitat" = colnames(pHData[4:12]),
"Site" = c("WB", "WB", "SK", "SK", "PG", "CI", "CI", "FB", "FB"),
"Habitat" = c("Eelgrass", "Bare", "Eelgrass", "Bare", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare"),
"pHMean" = rep(0, times = 9),
"pHVariance" = rep(0, times = 9)) #Create an empty dataframe to store outplant-wide means and variances
head(pHMeanVariance) #Confirm dataframe creation
nSiteHabitat <- 12 #pH data is column 4-12
for(i in 4:nSiteHabitat) { #For each column with pH data
pHMeanVariance$pHMean[i-3] <- mean(pHData[,i], na.rm = TRUE) #Calculate the mean and put it in the designated row in pHMeanVariance$Mean
}
for(i in 4:nSiteHabitat) { #For each column with pH data
pHMeanVariance$pHVariance[i-3] <- var(pHData[,i], na.rm = TRUE) #Calculate the variance and put it in the designated row in pHMeanVariance$Variance
}
pHMeanVariance <- pHMeanVariance[,-1] #Remove Site.Habitat column
head(pHMeanVariance) #Confirm calculations
DOData <- read.csv("../../2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2018-11-18-DO-Tide-Data-Corrected.csv", header = TRUE) #Import DO data
DOData <- DOData[,-1] #Remove extra first column
head(DOData) #Confirm import
knitr::opts_chunk$set(echo = TRUE) #Set up R Markdown File
#install.packages("vegan")
require(vegan)
#install.packages("cluster") #Install cluster package. This package has the function daisy that is used for the gower dissimilarity matrix.
require(cluster)
#install.packages("dplyr")
require(dplyr)
source("../../biostats.R") #Biostats analysis wrapper
sessionInfo() #Obtain session information
proteinAbundance <- read.csv("2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import protein abundance data
row.names(proteinAbundance) <- proteinAbundance[,1] #Assign first column as rownames
proteinAbundance <- proteinAbundance[,-1] #Remove first column
proteinAbundance <- t(proteinAbundance) #Transpose dataframe
head(proteinAbundance) #Confirm changes
proteinAbundanceHT <- data.trans(proteinAbundance, method = 'hellingers', plot = FALSE) #Hellinger (asymmetric) transformation
head(proteinAbundanceHT) #Confirm transformation
pHData <- read.csv("../../2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2018-11-18-pH-Tide-Data-Corrected.csv", header = TRUE) #Import pH data
pHData <- pHData[,-1] #Remove extra first column
head(pHData) #Confirm import
colnames(pHData)
pHMeanVariance <- data.frame("Site-Habitat" = colnames(pHData[4:12]),
"Site" = c("WB", "WB", "SK", "SK", "PG", "CI", "CI", "FB", "FB"),
"Habitat" = c("Eelgrass", "Bare", "Eelgrass", "Bare", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare"),
"pHMean" = rep(0, times = 9),
"pHVariance" = rep(0, times = 9)) #Create an empty dataframe to store outplant-wide means and variances
head(pHMeanVariance) #Confirm dataframe creation
nSiteHabitat <- 12 #pH data is column 4-12
for(i in 4:nSiteHabitat) { #For each column with pH data
pHMeanVariance$pHMean[i-3] <- mean(pHData[,i], na.rm = TRUE) #Calculate the mean and put it in the designated row in pHMeanVariance$Mean
}
for(i in 4:nSiteHabitat) { #For each column with pH data
pHMeanVariance$pHVariance[i-3] <- var(pHData[,i], na.rm = TRUE) #Calculate the variance and put it in the designated row in pHMeanVariance$Variance
}
pHMeanVariance <- pHMeanVariance[,-1] #Remove Site.Habitat column
head(pHMeanVariance) #Confirm calculations
DOData <- read.csv("../../2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2018-11-18-DO-Tide-Data-Corrected.csv", header = TRUE) #Import DO data
DOData <- DOData[,-1] #Remove extra first column
head(DOData) #Confirm import
colnames(DOData) #Look at columns to identify where the DO data is
DOMeanVariance <- data.frame("Site-Habitat" = colnames(DOData[4:13]),
"Site" = c("WB", "WB", "SK", "SK", "PG", "PG", "CI", "CI", "FB", "FB"),
"Habitat" = c("Eelgrass", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare"),
"DOMean" = rep(0, times = 10),
"DOVariance" = rep(0, times = 10)) #Create an empty dataframe to store outplant-wide means and variances
head(DOMeanVariance) #Confirm dataframe creation
nSiteHabitat <- 13 #DO data is column 4-13
for(i in 4:nSiteHabitat) { #For each column with DO data
DOMeanVariance$DOMean[i-3] <- mean(DOData[,i], na.rm = TRUE) #Calculate the mean and put it in the designated row in DOMeanVariance$DOMean
}
for(i in 4:nSiteHabitat) { #For each column with pH data
DOMeanVariance$DOVariance[i-3] <- var(DOData[,i], na.rm = TRUE) #Calculate the variance and put it in the designated row in DOMeanVariance$DOVariance
}
DOMeanVariance <- DOMeanVariance[,-1] #Remove Site.Habitat column
head(DOMeanVariance) #Confirm calculations
salinityData <- read.csv("../../2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2018-11-18-Salinity-Tide-Data-Corrected.csv", header = TRUE) #Import pH data
salinityData <- salinityData[,-1] #Remove extra first column
head(salinityData) #Confirm import
colnames(salinityData)
salinityMeanVariance <- data.frame("Site-Habitat" = colnames(salinityData[4:11]),
"Site" = c("CI", "CI", "FB", "FB", "PG", "SK", "SK", "WB"),
"Habitat" = c("Bare", "Eelgrass", "Bare", "Eelgrass", "Eelgrass", "Bare", "Eelgrass", "Bare"),
"salinityMean" = rep(0, times = 8),
"salinityVariance" = rep(0, times = 8)) #Create an empty dataframe to store outplant-wide means and variances
head(salinityMeanVariance) #Confirm dataframe creation
nSiteHabitat <- 11 #pH data is column 4-11
for(i in 4:nSiteHabitat) { #For each column with pH data
salinityMeanVariance$salinityMean[i-3] <- mean(salinityData[,i], na.rm = TRUE) #Calculate the mean and put it in the designated row
}
for(i in 4:nSiteHabitat) { #For each column with pH data
salinityMeanVariance$salinityVariance[i-3] <- var(salinityData[,i], na.rm = TRUE) #Calculate the variance and put it in the designated row
}
salinityMeanVariance <- salinityMeanVariance[,-1] #Remove Site.Habitat column
head(salinityMeanVariance) #Confirm calculations
temperatureData <- read.csv("../../2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2018-11-18-Temperature-Corrected.csv", header = TRUE) #Import temperature data
temperatureData <- temperatureData[,-1] #Remove extra first column
head(temperatureData) #Confirm import
colnames(temperatureData) #Figure out where data is
temperatureMeanVariance <- data.frame("Site-Habitat" = colnames(temperatureData[3:12]),
"Site" = c("WB", "WB", "SK", "SK", "PG", "PG", "CI", "CI", "FB", "FB"),
"Habitat" = c("Eelgrass", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare", "Eelgrass", "Bare"),
"temperatureMean" = rep(0, times = 10),
"temperatureVariance" = rep(0, times = 10)) #Create an empty dataframe to store outplant-wide means and variances
head(temperatureMeanVariance) #Confirm dataframe creation
nSiteHabitat <- 12 #pH data is column 3-12
for(i in 3:nSiteHabitat) { #For each column with pH data
temperatureMeanVariance$temperatureMean[i-2] <- mean(temperatureData[,i], na.rm = TRUE) #Calculate the mean and put it in the designated row
}
for(i in 3:nSiteHabitat) { #For each column with pH data
temperatureMeanVariance$temperatureVariance[i-2] <- var(temperatureData[,i], na.rm = TRUE) #Calculate the variance and put it in the designated row
}
temperatureMeanVariance <- temperatureMeanVariance[,-1] #Remove Site.Habitat column
head(temperatureMeanVariance) #Confirm calculations
environmentalData <- left_join(temperatureMeanVariance, pHMeanVariance, by = c("Site", "Habitat")) #Use left_join to merge dataframes and add NAs where the two dataframes do not match. temperatureData is used as the base because it has observations for all 10 Site and Habitat combinations
environmentalData <- left_join(environmentalData, DOMeanVariance, by = c("Site", "Habitat")) #Add salinity data
environmentalData <- left_join(environmentalData, salinityMeanVariance, by = c("Site", "Habitat")) #Add temperature data
head(environmentalData)
biologicalReplicates <- read.csv("../../2017-09-06-Biological-Replicate-Information.csv", header = TRUE) #Import biological replciate information
head(biologicalReplicates) #Confirm import
biologicalReplicates$Sample.Number <- as.character(biologicalReplicates$Sample.Number) #Convert sample number to character string
biologicalReplicates$Sample.Number <- substr(biologicalReplicates$Sample.Number, 1, nchar(biologicalReplicates$Sample.Number)-2) #Remove -1 or -2 from end of sample number
biologicalReplicates <- biologicalReplicates[1:49,] #Keep only the first 50 rows, since everything repeats. Also eliminate OBLNK2
colnames(biologicalReplicates)[3] <- "Habitat" #Change Eelgrass.Condition to Habitat
tail(biologicalReplicates) #Confirm changes
colnames(environmentalData)
environmentalSampleData <- data.frame("Sample.Number" = biologicalReplicates$Sample.Number,
"Site" = biologicalReplicates$Site,
"Habitat" = biologicalReplicates$Habitat,
"temperatureMean" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"temperatureVariance" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"pHMean" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"pHVariance" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"DOMean" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"DOVariance" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"salinityMean" = rep(0, times = length(biologicalReplicates$Sample.Number)),
"salinityVariance" = rep(0, times = length(biologicalReplicates$Sample.Number))) #Create a new dataframe for sample and environmental data. Column names follow the same ordering as environmentalData
head(environmentalSampleData) #Confirm dataframe creation
colnames(environmentalSampleData)
environmentalSampleData[environmentalSampleData$Site == "CI" & environmentalSampleData$Habitat == "Bare", 4:11]
environmentalData[environmentalData$Site == "CI" & environmentalData$Habitat == "Bare",3:10]
#Replace 0s in environmentalSampleData using corresponding information from environmentalData
#Case Inlet
environmentalSampleData[environmentalSampleData$Site == "CI" & environmentalSampleData$Habitat == "Bare", 4:11] <- environmentalData[environmentalData$Site == "CI" & environmentalData$Habitat == "Bare", 3:10]
environmentalSampleData[environmentalSampleData$Site == "CI" & environmentalSampleData$Habitat == "Eelgrass", 4:11] <- environmentalData[environmentalData$Site == "CI" & environmentalData$Habitat == "Eelgrass", 3:10]
#Fidalgo Bay
environmentalSampleData[environmentalSampleData$Site == "FB" & environmentalSampleData$Habitat == "Bare", 4:11] <- environmentalData[environmentalData$Site == "FB" & environmentalData$Habitat == "Bare", 3:10]
environmentalSampleData[environmentalSampleData$Site == "FB" & environmentalSampleData$Habitat == "Eelgrass", 4:11] <- environmentalData[environmentalData$Site == "FB" & environmentalData$Habitat == "Eelgrass", 3:10]
#Port Gamble Bay
environmentalSampleData[environmentalSampleData$Site == "PG" & environmentalSampleData$Habitat == "Bare", 4:11] <- environmentalData[environmentalData$Site == "PG" & environmentalData$Habitat == "Bare", 3:10]
environmentalSampleData[environmentalSampleData$Site == "PG" & environmentalSampleData$Habitat == "Eelgrass", 4:11] <- environmentalData[environmentalData$Site == "PG" & environmentalData$Habitat == "Eelgrass", 3:10]
#Skokomish River Delta
environmentalSampleData[environmentalSampleData$Site == "SK" & environmentalSampleData$Habitat == "Bare", 4:11] <- environmentalData[environmentalData$Site == "SK" & environmentalData$Habitat == "Bare", 3:10]
environmentalSampleData[environmentalSampleData$Site == "SK" & environmentalSampleData$Habitat == "Eelgrass", 4:11] <- environmentalData[environmentalData$Site == "SK" & environmentalData$Habitat == "Eelgrass", 3:10]
#Willapa Bay
environmentalSampleData[environmentalSampleData$Site == "WB" & environmentalSampleData$Habitat == "Bare", 4:11] <- environmentalData[environmentalData$Site == "WB" & environmentalData$Habitat == "Bare", 3:10]
environmentalSampleData[environmentalSampleData$Site == "WB" & environmentalSampleData$Habitat == "Eelgrass", 4:11] <- environmentalData[environmentalData$Site == "WB" & environmentalData$Habitat == "Eelgrass", 3:10]
head(environmentalSampleData) #Confirm replacements happened
row.names(environmentalSampleData) <- environmentalSampleData$Sample.Number #Assign Sample.Number as row names
environmentalSampleData <- environmentalSampleData[,-1] #Remove Sample.Number column
head(environmentalSampleData) #Confirm changes
environmentalSampleData.log <- log(environmentalSampleData[,-c(1:2)] + 1) #Log transform all columns that aren't Site and Habitat
head(environmentalSampleData.log) #Confirm changes
decorana(proteinAbundanceHT, ira = 0) #Determine gradient length. Gradient length <2 is best represented by a linear model (RDA), 2-4 could be unimodal (RDA or CCA appropriate), and >4 is greater than unimodal (CCA). The length of DCA1 is , so the underlying model is.
protRDA <- rda(proteinAbundanceHT, environmentalSampleData.log) #Perform the RDA with hellinger-transformed protein abundance data and log-transformed environmental data
View(environmentalSampleData)
View(environmentalSampleData.log)
View(proteinAbundanceHT)
head(environmentalSampleData.log) #Confirm changes
rownames(environmentalSampleData.log) == rownames(proteinAbundanceHT) #Ensure that samples in environmental data are those from the protein abundance data
environmentalSampleData.log[rownames(proteinAbundanceHT).] #Ensure that samples in environmental data are those from the protein abundance data
environmentalSampleData.log[rownames(proteinAbundanceHT),] #Ensure that samples in environmental data are those from the protein abundance data
environmentalSampleData.log <- environmentalSampleData.log[rownames(proteinAbundanceHT),] #Ensure that samples in environmental data are those from the protein abundance data
length(environmentalSampleData.log)
length(environmentalSampleData.log$temperatureMean) == length(proteinAbundanceHT)
length(environmentalSampleData.log$temperatureMean) == length(proteinAbundanceHT$`CHOYP_ACAA2.1.1|m.30666 ELGLNNDITNMNGGAIALGHPLAASGTR`)
protRDA <- rda(proteinAbundanceHT, environmentalSampleData.log) #Perform the RDA with hellinger-transformed protein abundance data and log-transformed environmental data
environmentalSampleData.log <- environmentalSampleData.log[rownames(proteinAbundanceHT),] #Ensure that samples in environmental data are those from the protein abundance data
protRDA <- rda(proteinAbundanceHT, environmentalSampleData.log) #Perform the RDA with hellinger-transformed protein abundance data and log-transformed environmental data
?rda
protRDA <- rda(x = proteinAbundanceHT, y = environmentalSampleData.log) #Perform the RDA with hellinger-transformed protein abundance data and log-transformed environmental data
cca(proteinAbundanceHT~., environmentalSampleData.log)
rda(proteinAbundanceHT~., environmentalSampleData.log)
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.rm)
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.rm(environmentalSampleData.log))
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.omit(environmentalSampleData.log))
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.omit)
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.rm)
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.exclude)
rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.exclude)
protEnvRDA <- rda(proteinAbundanceHT~., environmentalSampleData.log, na.action = na.exclude)
summary(protEnvRDA) #Look at the summary. Total inertia is the total variation explained by the RDA. Constrained inertia is the v
anova(protEnvRDA) #Test significance of the RDA in general
anova(protEnvRDA, by = 'axis') #Test significance of each axis
anova(spe.cca, by = 'terms') #Test significance of each predictor variable from X
anova(protEnvRDA, by = 'terms') #Test significance of each predictor variable from X
plot(protEnvRDA, choices = c(1,2), type = 'points', display = 'wa', scaling = 2) #Visualize the ordination by plotting the weighted average scores. Scaling method optimizes for descriptors.
plot(protEnvRDA, choices = c(1,2), type = 'n', display = 'wa', scaling = 2) #Visualize the WA scores
text(protEnvRDA, choices = c(1,2), labels = row.names(speabu)) #Add site indiciation instead of points
plot(protEnvRDA, choices = c(1,2), type = 'n', display = 'wa', scaling = 2) #Visualize the WA scores
text(protEnvRDA, choices = c(1,2), labels = row.names(proteinAbundanceHT)) #Add site indiciation instead of points
round(intrasetcor(protEnvRDA), 5) #Obtain the intra-set correlation (structure) coefficients
round(intersetcor(protEnvRDA), 5) #Obtain the inter-set correlation (structure) coefficients
summary(protEnvRDA) #Get biplot scores for explanatory variables
plot(protEnvRDA, choices = c(1,2), display = c('wa', 'sp', 'bp'), scaling = 2) #Obtain the triplot with weighted average scores (wa), species scores (sp), and environmental variable biplot scores (bp). Scale to enhance descriptors.
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = 19, cex = 1.5, scaling = 2) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = .75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue') #Plot predictors
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue', select = 1) #Plot predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = 19, cex = 1.5, scaling = 2) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = .75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue', select = 1) #Plot predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = 19, cex = 1.5, scaling = 2) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = .75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue', select = 1:2) #Plot predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = 19, cex = 1.5, scaling = 2) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = .75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue') #Plot predictors
View(protEnvRDA)
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = 19, cex = 0.5, scaling = 2) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue') #Plot predictors
View(protEnvRDA)
head(biologicalReplicates)
temporaryData <- data.frame(Sample.Number = sampleColumnNames,
y = rep(x = 0, times = length(sampleColumnNames))) #Create a temporary dataframe with sample  names
temporaryData <- data.frame("Sample.Number" = biologicalReplicates$Sample.Number,
y = rep(x = 0, times = length(biologicalReplicates$Sample.Number))) #Create a temporary dataframe with sample  names
head(temporaryData) #Confirm dataframe creation
NMDSColorShapeCustomization <- merge(x = temporaryData, y = biologicalReplicates, by = "Sample.Number") #Merge biological information with samples used
head(NMDSColorShapeCustomization) #Confirm merge
tail(NMDSColorShapeCustomization) #Confirm merge
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[,-2] #Remove empty column
head(NMDSColorShapeCustomization) #Confirm removal
temporaryData <- data.frame("Sample.Number" = biologicalReplicates$Sample.Number,
y = rep(x = 0, times = length(biologicalReplicates$Sample.Number))) #Create a temporary dataframe with sample  names
head(temporaryData) #Confirm dataframe creation
NMDSColorShapeCustomization <- merge(x = temporaryData, y = biologicalReplicates, by = "Sample.Number") #Merge biological information with samples used
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[,-2] #Remove empty column
head(NMDSColorShapeCustomization) #Confirm removal
#Add region information (Puget Sound vs. Willapa Bay)
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization$Region <- c(rep("PS", times = (length(NMDSColorShapeCustomization$Site)-6)), rep("WB", times = 6)) #Add regional information
NMDSColorShapeCustomization$NMDS.Region.Shapes <- c(rep(20, times = (length(NMDSColorShapeCustomization$Site)-6)), rep(8, times = 6))
head(NMDSColorShapeCustomization) #Confirm changes
tail(NMDSColorShapeCustomization) #Confirm changes
#Create a color and shape palette
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Colors <- c(rep(x = "#00A9BD", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "#38001C", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "#440D82", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "#017A74", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "#EB8B0C", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
NMDSColorShapeCustomization[,6] <- NMDS.Colors #Add the color vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Eelgrass.Condition),] #Reorder so eelgrass condition is sorted alphabetically
#Create a color and shape palette
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Colors <- c(rep(x = "#00A9BD", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "#38001C", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "#440D82", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "#017A74", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "#EB8B0C", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
NMDSColorShapeCustomization[,6] <- NMDS.Colors #Add the color vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Habitat),] #Reorder so habitat is sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Shapes <- c(rep(x = 1, times = sum(NMDSColorShapeCustomization$Habitat == "Bare")),
rep(x = 16, times = sum(NMDSColorShapeCustomization$Habitat == "Eelgrass"))) #Make a shape vector
NMDSColorShapeCustomization[,7] <- NMDS.Shapes #Add the shape vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Sample.Number),] #Resort by sample number
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
colnames(NMDSColorShapeCustomization) <- c("Sample.Number", "Site", "Eelgrass.Condition", "Region", "Region.Shape", "Color", "Shape") #Change column names
head(NMDSColorShapeCustomization) #Confirm changes
tail(NMDSColorShapeCustomization) #Confirm changes
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = 19, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue') #Plot predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue') #Plot predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'red', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'blue', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey80', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'black', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey90', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.75, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey50', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.05, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey50', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.15, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey50', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.15, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'black', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.15, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'black', select = 1:2) #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.15, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'black') #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'black', cex = 0.15, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'grey20', cex = 0.15, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
text(protEnvRDA, choices = c(1,2), display = 'sp', col = 'grey20', cex = 0.25, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'grey20', cex = 0.5, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', col = 'grey20', cex = 0.5, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', pch = 22, col = 'grey20', bg = "grey20", cex = 0.5, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
pdf("analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-11-28-RDA-Plot.pdf", width = 11, height = 8.5)
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', pch = 22, col = 'grey20', bg = "grey20", cex = 0.5, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
dev.off()
pdf("analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-11-28-RDA-Plot-Significant-Only.pdf", width = 11, height = 8.5)
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', pch = 22, col = 'grey20', bg = "grey20", cex = 0.5, scaling = 2, select = c(4, 6:10, 14:15, 18:20, 22, 24)) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20', select = 1:2) #Plot only marginally significant predictors
dev.off()
pdf("analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-11-28-RDA-Plot.pdf", width = 11, height = 8.5)
plot(protEnvRDA, choices=c(1,2), type = 'none', scaling = 2) #Create an empty plot based on RDA dimensions
points(protEnvRDA, choices = c(1,2), display = 'wa', pch = NMDSColorShapeCustomization$Shape, cex = 0.5, scaling = 2, col = NMDSColorShapeCustomization$Color) #Plot objects as points
points(protEnvRDA, choices = c(1,2), display = 'sp', pch = 22, col = 'grey20', bg = "grey20", cex = 0.5, scaling = 2) #Plot descriptors as text
text(protEnvRDA, choices = c(1,2), display = 'bp', col = 'grey20') #Plot only marginally significant predictors
dev.off()
