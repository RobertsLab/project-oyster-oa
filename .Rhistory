8+5
1:250
print("hello world!")
x <- 1:5
x
y <- c(6, 7, 8, 9, 10)
y
a  <-  b <- c <- 3
x + y
rm(list = ls())
install.packages("ggplot2")
require("ggplot")
require("ggplot2")
trends.txt  <- read.table("~/Downloads/R/GoogleTrends.txt", header = TRUE, sep = "\t")
View(trends.txt)
trends.csv  <- read.csv("~Downloads/R/GoogleTrends.csv", header = TRUE)
trends.csv  <- read.csv("~/Downloads/R/GoogleTrends.csv", header = TRUE)
View(trends.csv)
View(trends.csv)
str(trends.csv)
log(x = 10, base = 10)
log(10)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#--Question 2a
#--Question 2a
#--Question 2a
#--Question 2a
seq?
?seq
seq(from -1 to 1, length.out = 100)
seq(from -1, to 1, length.out = 100)
seq(from -1, to 1, length.out=100)
seq(from -1 to 1, length.out=100)
seq(from -1, to 1, length.out=100)
seq(-1, 1, length.out=100)
x <-- seq(-1, 1, length.out=100)
exp(x/2)
y <-- exp(x/2)
y[y > 1]
y > 1
y[y > 1]
rep("Small", "Medium", "Large", each = 5)
size.nonfac <-- c("Small", "Small", "Small", "Small", "Small", "Medium", "Medium", "Medium","Medium", "Medium", "Large", "Large", "Large", "Large", "Large")
x <- seq(-1, 1, length.out=100)
y <- exp(x/2)
y[y > 1]
which(y > 1)
length(y > 1)
y > 1
sum(y > 1)
size.nonfac <- c("Small", "Small", "Small", "Small", "Small", "Medium", "Medium", "Medium","Medium", "Medium", "Large", "Large", "Large", "Large", "Large")
size <- factor(size.nonfac)
unknown.nonfac <- c("Unknown", "Unknown")
unknown <- factor(unknown.nonfac)
rbind(size, unknwon)
rbind(size, unknown)
size.nonfac <-rep(1:3, each = 5)
size <- factor(size.nonfac, labels=c("Small", "Medium", "Large")
size <- factor(size.nonfac, labels=c("Small", "Medium", "Large"))
size <- factor(size, labels = c("Small", "Medium", "Large"))
unknown.nonfac <- rep(1, each = 2)
size <- factor(size.nonfac, labels = c("Small", "Medium", "Large"))
unknown <- factor(unknown.nonfac, labels = c("Unknown"))
rbind(size, unknown)
head(size)
str(size)
c(size, unknown)
unknown.nonfac <- rep(4, each = 2)
unknown <- factor(unknown.nonfac, labels = c("Unknown"))
c(size, unknown)
c(size.nonfac, unknown.nonfac)
size <- factor(size.nonfac, labels = c("Small", "Medium", "Large"))
observedSize.nonfac <- c(size.nonfac, unknown.nonfac)
observedSize <- factor(observedSize.nonfac, labels = c("Small", "Medium", "Large", "Unknwon"))
str(observedSize)
observedSize.nonfac <- c(size.nonfac, unknown.nonfac)
str(observedSize.nonfac)
observedSize.nonfac
observedSize
unknown.nonfac <- rep(4, each = 2)
observedSize.nonfac <- c(size.nonfac, unknown.nonfac)
observedSize <- factor(observedSize.nonfac, labels = c("Small", "Medium", "Large", "Unknwon"))
observedSize
read.table(file = "fishPassage.csv", header = T, sep = ",", skip = 0, na.strings = NA)
x <- seq(-1, 1, length.out=100) #create sequence with length of 100 values
y <- exp(x/2)
sum(y > 1) #add values together that are "TRUE" for y > 1
size.nonfac <-rep(1:3, each = 5) #create vector
size <- factor(size.nonfac, labels = c("Small", "Medium", "Large")) #exchange numbers for small, medium and large
size #view final vector with labelled factors
unknown.nonfac <- rep(4, each = 2) #create vector with new values
observedSize.nonfac <- c(size.nonfac, unknown.nonfac) #combine both vectors with unlabelled factors
observedSize <- factor(observedSize.nonfac, labels = c("Small", "Medium", "Large", "Unknwon")) #label factors
observedSize #view final vector with labelled factors
fishPassage <- read.csv(file = "fishPassage.csv", header = T, sep = ",", na.strings = "NA")
str(bonnevilleDam.data) #confirm dataframe structure
bonnevilleDam.data <- fishPassage[fishPassage$Dam == "BON",] #create new dataframe for just BON data
fishPassage <- read.csv(file = "fishPassage.csv", header = T, sep = ",", na.strings = "NA")
read.csv(file = "ScrapData.csv", header = TRUE)
install.packages("HH")
library(HH)
?HH
case(cholesterolModel)
cholesterolData <- read.csv(file = "homework_2.csv") #Import data
cholesterolModel <- lm(cholesterol ~ calcium, data = cholesterolData)
proteinAreas <- read.csv("2017-06-10-protein-areas-only-error-checked.csv", na.strings = "#N/A") #Specify Skyline's special way of designating N/A values
dir.create("../Downloads/2017-Geoduck-SRM-raw/")
dir.create("../Downloads/2017-Geoduck-SRM-raw/")
?dir.create
dir.create(path = "../Downloads/2017-Geoduck-SRM-raw/")
dir.create("../Guest/Downloads/2017-Geoduck-SRM-raw")
dir.create("./Downloads/2017-Geoduck-SRM-raw")
getwd()
histologyData <- read.csv("Documents/project-oyster-oa/analyses/Manchester_Gonad_Histology/2018-02-27-Histology-Classification-Analyses.R")
histologyData <- read.csv("Documents/project-oyster-oa/data/Manchester/2018-02-27-Gigas-Histology-Classification.csv")
head(histologyData)
histologyData$Mature <- rep(0, nrow(histology$Mature))
histologyData$Mature <- rep(0, nrow(histologDatay$Mature))
histologyData$Mature <- rep(0, nrow(histologData$Mature))
histologyData$Mature <- rep(0, nrow(histologyData$Mature))
histologyData$Mature <- rep(0, length(histologyData$Mature))
histologyData$Mature <- rep(0, nrow(histologyData))
histologyData$Mature[which(histologyData$Stage>=mature.stage)]<-rep(1, length(which(histologyData$Stage>=mature.stage)))
mature.stage <- 3
histologyData$Mature[which(histologyData$Stage>=mature.stage)]<-rep(1, length(which(histologyData$Stage>=mature.stage)))
histologyData
View(histologyData)
View(histologyData)
histologyData$Treatment <- c(rep("Ambient", times = 20), rep("Low", times = 10), rep("Ambient", times = 10))
mature.glm <- glm(Mature ~ Treatment * Pre.or.Post.OA, data = histologyData, family = binomial)
summary(mature.glm)
mature.glm <- glm(Mature ~ Treatment + Pre.or.Post.OA, data = histologyData, family = binomial)
summary(mature.glm)
getwd()
getwd()
#### AVERAGE TECHNICAL REPLICATES ####
#After examining how my technical replicates are clustering together, I will average and proceed with an ANOSIM and NMDS
head(SRMDataNMDSNonNormalizedPivotedCorrected) #Dataset I'll use to average technical replicates, from my first R script (NMDS for Technical Replication)
SRMDataNMDSNonNormalizedAveraged <- data.frame(x = rep(x = 0, times = 111),
y = rep(x = 0, times = 111)) #Create an empty dataframe to store averaged values
row.names(SRMDataNMDSNonNormalizedAveraged) <- SRMDataNMDSNonNormalizedPivotedCorrected$RowNames #Add row names
head(SRMDataNMDSNonNormalizedAveraged) #Confirm changes
for(i in 1:(length(SRMDataNMDSNonNormalizedPivotedCorrected)-1)) { #Average normalized area values for consecutive columns
SRMDataNMDSNonNormalizedAveraged[,i] <- (SRMDataNMDSNonNormalizedPivotedCorrected[,i]+SRMDataNMDSNonNormalizedPivotedCorrected[,i+1])/2
}
head(SRMDataNMDSNonNormalizedAveraged) #Confirm averaging
SRMDataNMDSNonNormalizedAveraged <- SRMDataNMDSNonNormalizedAveraged[seq(from = 1, to = (length(SRMDataNMDSNonNormalizedPivotedCorrected)-1), by = 2)] #Remove even-numbered columns, since those consecutive columns are not technical replicates
head(SRMDataNMDSNonNormalizedAveraged) #Confirm column removal
colnames(SRMDataNMDSNonNormalizedAveraged) <- technicalReplicates[seq(from = 1, to = (length(SRMDataNMDSNonNormalizedPivotedCorrected)-1), by = 2)] #Add column names
colnames(SRMDataNMDSNonNormalizedAveraged) #Confirm column naming
library(devtools)
install.packages("devtools")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'partyatmyhouse')
partyatmyhouse
version
citation()
citation("oce")
install.packages("oce")
citation("oce")
getwd()
setwd("Documents/project-oyster-oa/analyses/DNR_SRM_20170902/")
tideData <- read.csv("../../data/DNR/2017-12-13-Tidal-Data-by-Site.csv", header = TRUE, strip.white = TRUE) #Import the tide data
head(tideData) #Confirm import
tideData$Date <- as.Date(tideData$Date, format = "%m/%d/%y") #Convert entries to dates
tideData$DateTime <- paste(tideData$Date, tideData$Time) #Create new DateTime column to easily merge tide and environmental data
colnames(tideData) <- c("Date", "Time", "CI-Tide", "FB-Tide", "PG-Tide", "SK-Tide", "WB-Tide", "DateTime")
head(tideData) #Confirm changes
#Count exposure intervals, multiply by 10 to convert to minutes, and divide by 60 to convert to hours.
((length(which(tideData$`CI-Tide` <= 1))*10)/60) #125.6667
((length(which(tideData$`FB-Tide` <= 1))*10)/60) #188
((length(which(tideData$`PG-Tide` <= 1))*10)/60) #146.8333
((length(which(tideData$`SK-Tide` <= 1))*10)/60) #138.3333
((length(which(tideData$`WB-Tide` <= 1))*10)/60) #113.6667
length(tideData) #
length(tideData$DateTime) #
?prop.test
source('~/Documents/project-oyster-oa/analyses/DNR_SRM_20170902/2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-12-13-Environmental-Data-Quality-Control/2017-12-13-Environmental-Data-Quality-Control.R', echo=TRUE)
#Count exposure intervals, multiply by 10 to convert to minutes, and divide by 60 to convert to hours.
CIexposed <- ((length(which(tideData$`CI-Tide` <= 1))*10)/60) #125.6667
FBexposed <- ((length(which(tideData$`FB-Tide` <= 1))*10)/60) #188
PGexposed <- ((length(which(tideData$`PG-Tide` <= 1))*10)/60) #146.8333
SKexposed <- ((length(which(tideData$`SK-Tide` <= 1))*10)/60) #138.3333
WBexposed <- ((length(which(tideData$`WB-Tide` <= 1))*10)/60) #113.6667
exposureHours <- (CIexposed, FBexposed, PGexposed, SKexposed, WBexposed)
exposureHours <- (CIexposed, FBexposed, PGexposed, SKexposed, WBexposed)
((length(tideData$DateTime)*10)/60) #8064
CIsubmerged <- (((length(tideData$DateTime)*10)/60) - CIexposed) #1344
FBsubmerged <- (((length(tideData$DateTime)*10)/60) - FBexposed)
PGsubmerged <- (((length(tideData$DateTime)*10)/60) - PGexposed)
SKsubmerged <- (((length(tideData$DateTime)*10)/60) - SKexposed)
WBsubmerged <- (((length(tideData$DateTime)*10)/60) - WBexposed)
proportionTestData <- data.frame("exposed" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"submerged" = c(CIsubmerged, FBsubmerged, PGsubmerged, SKsubmerged, WBsubmerged))
prop.test(proportionTestData)
proportionTestData <- matrix("exposed" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"submerged" = c(CIsubmerged, FBsubmerged, PGsubmerged, SKsubmerged, WBsubmerged))
proportionTestData <- data.frame("exposed" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"submerged" = c(CIsubmerged, FBsubmerged, PGsubmerged, SKsubmerged, WBsubmerged))
View(proportionTestData)
prop.test(proportionTestData, n = 5)
View(proportionTestData)
prop.test(proportionTestData, n = 2)
prop.test(proportionTestData, n = 5)
prop.test(proportionTestData, n = 4)
prop.test(proportionTestData, n = 6)
View(proportionTestData)
prop.test(proportionTestData, n = 10)
prop.test(proportionTestData, n = (((length(tideData$DateTime)*10)/60))
prop.test(proportionTestData, n = (((length(tideData$DateTime)*10)/60)))
(((length(tideData$DateTime)*10)/60))
prop.test(proportionTestData, n = 1344)
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"failure" = c(CIsubmerged, FBsubmerged, PGsubmerged, SKsubmerged, WBsubmerged))
prop.test(proportionTestData)
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"failure" = c(CIsubmerged, FBsubmerged, PGsubmerged, SKsubmerged, WBsubmerged),
"total" = rep((((length(tideData$DateTime)*10)/60)), times = 5))
prop.test(proportionTestData$success, proportionTestData$total)
prop.test(proportionTestData$failure, proportionTestData$total)
CIexposed <- (((length(which(tideData$`CI-Tide` <= 1))*10)/60)/24) #125.6667
FBexposed <- (((length(which(tideData$`FB-Tide` <= 1))*10)/60)/24) #188
PGexposed <- (((length(which(tideData$`PG-Tide` <= 1))*10)/60)/24) #146.8333
SKexposed <- (((length(which(tideData$`SK-Tide` <= 1))*10)/60)/24) #138.3333
WBexposed <- (((length(which(tideData$`WB-Tide` <= 1))*10)/60)/24) #113.6667
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"total" = rep(((((length(tideData$DateTime)*10)/60)/24)), times = 5))
prop.test(proportionTestData$failure, proportionTestData$total)
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"total" = rep((((length(tideData$DateTime)*10)/60)/24)), times = 5)
prop.test(proportionTestData$failure, proportionTestData$total)
length(tideData$DateTime)
(length(tideData$DateTime)*10)
((length(tideData$DateTime)*10)/60)
(((length(tideData$DateTime)*10)/60)/24)
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"total" = (rep(((length(tideData$DateTime)*10)/60)/24), times = 5))
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"total" = (rep(((length(tideData$DateTime)*10)/60)/24), times = 5))
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"total" = rep((((length(tideData$DateTime)*10)/60)/24), times = 5))
prop.test(proportionTestData$failure, proportionTestData$total)
rep((((length(tideData$DateTime)*10)/60)/24), times = 5)
proportionTestData <- data.frame("success" = c(CIexposed, FBexposed, PGexposed, SKexposed, WBexposed),
"total" = rep(56, times = 5))
prop.test(proportionTestData$failure, proportionTestData$total)
#Count exposure intervals, multiply by 10 to convert to minutes, and divide by 60 to convert to hours.
CIexposed <- (length(which(tideData$`CI-Tide` <= 1))*10)/60)
FBexposed <- ((length(which(tideData$`FB-Tide` <= 1))*10)/60)
PGexposed <- ((length(which(tideData$`PG-Tide` <= 1))*10)/60)
SKexposed <- ((length(which(tideData$`SK-Tide` <= 1))*10)/60)
WBexposed <- ((length(which(tideData$`WB-Tide` <= 1))*10)/60)
