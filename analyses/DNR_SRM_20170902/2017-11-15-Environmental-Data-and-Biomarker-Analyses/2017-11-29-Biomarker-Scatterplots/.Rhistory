getwd()
setwd("../..") #Set working directory to the master SRM folder
getwd()
SRMDataNMDSAveragedCorrected <- read.csv("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import modified dataset. This dataset has rownames as the first column, column names as sample IDs. Area data is averaged and corrected (no NAs)
rownames(SRMDataNMDSAveragedCorrected) <- SRMDataNMDSAveragedCorrected[,1]
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveragedCorrected[,-1] #Remove first column of rownames
head(SRMDataNMDSAveragedCorrected) #Confirm import.
SRMDataNMDSAveragedCorrectedTransposed <- data.frame(t(SRMDataNMDSAveragedCorrected)) #Transpose the data
SRMDataNMDSAveragedCorrectedTransposed$Sample.Number <- rownames(SRMDataNMDSAveragedCorrectedTransposed) #Save rownames as a new column
head(SRMDataNMDSAveragedCorrectedTransposed) #Confirm changes
biomarkerData <- read.csv("../../data/DNR/2017-11-21-Alex-Data-Yaamini-Samples-Only.csv") #Import dataset
biomarkerData <- biomarkerData[,-c(1:3, 5, 8:11, 13:14)] #Remove empty columns and columns I don't need (Round, Spp, Bag, Rep.x, FAvial, topValve, bothValves)
head(biomarkerData) #Confirm changes
colnames(biomarkerData) <- c("Sample.Number", "Site", "Habitat", "Final Shell Height", "Tissue Mass", "Shell Thickness", "Peak Load", "Shell Strength", "delta C", "Percent C", "delta N", "Percent N", "C to N Ratio")
head(biomarkerData)
peptideBiomarkerData <- merge(x = SRMDataNMDSAveragedCorrectedTransposed, y = biomarkerData, by = "Sample.Number") #Merge dataframes by sample number
head(peptideBiomarkerData) #Confirm changes. Peptides are columns 2-38, biomarkers 41-50
attach(peptideBiomarkerData) #Attach dataframe
peptideBiomarkerData <- peptideBiomarkerData[order(Site),] #Reorder so sites are sorted alphabetically
head(peptideBiomarkerData) #Confirm sorting
tail(peptideBiomarkerData) #Confirm sorting
detach(peptideBiomarkerData)
peptideBiomarkerData$Colors <- c(rep(x = "red", times = sum(peptideBiomarkerData$Site == "CI")),
rep(x = "blue", times = sum(peptideBiomarkerData$Site == "FB")),
rep(x = "magenta", times = sum(peptideBiomarkerData$Site == "PG")),
rep(x = "green", times = sum(peptideBiomarkerData$Site == "SK")),
rep(x = "black", times = sum(peptideBiomarkerData$Site == "WB"))) #Create a color vector
head(peptideBiomarkerData) #Confirm addition
tail(peptideBiomarkerData) #Confirm addition
setwd("2017-11-15-Environmental-Data-and-Biomarker-Analyses/2017-11-29-Biomarker-Scatterplots/") #Change working directory
getwd() #Confirm changes
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
head(comparisonStatistics) #Confirm changes
testPeptides <- seq(from = 2, to = 3, by = 1)
testBiomarkers <- seq(from = 41, to = 42, by = 1)
testComparisonName <- seq(from = 1, to = 2, by = 1)
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
View(comparisonStatistics)
nPeptides <- 38 #Columns 2-38 are peptides
testPeptides <- 3
testBiomarkers <- 42
testComparisonName <- 2
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
View(comparisonStatistics)
View(comparisonStatistics)
for(i in 3:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
for(i in 3:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
for(i in 2:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
for(i in 2:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 2:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
View(comparisonStatistics)
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
head(comparisonStatistics) #Confirm changes
for(i in 3:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 2:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
for(i in 3:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 2:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
for(i in 2:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 2:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
for(i in 2:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 2:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
for(i in 2:testPeptides) { #For all peptides
for (j in 42:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
for(k in 1:testComparisonName) { #For all comparisons
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("ComparisonName" = rep(x = 0, times = 370),
"Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
peptideBiomarkerModel <- lm(peptideBiomarkerData[,2] ~ peptideBiomarkerData[,41], na.action = na.omit) #Make model
comparisonStatistics$ComparisonName[1] <- paste(colnames(peptideBiomarkerData)[2], "vs.", colnames(peptideBiomarkerData)[41]) #Assign comparison name
comparisonStatistics$Peptide[1] <-  colnames(peptideBiomarkerData)[2] #Specify peptide
comparisonStatistics$Biomarker[1] <- colnames(peptideBiomarkerData)[41] #Specify biomarker
comparisonStatistics$R.Squared[1] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[1] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
testBiomarkers <- 42
testComparisonName <- 2
debug(for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
for(k in 1:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit)
comparisonStatistics$ComparisonName[k] <- paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]) #Assign comparison name
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
})
View(peptideBiomarkerData)
comparisonStatistics <- data.frame("Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
head(comparisonStatistics) #Confirm changes
testComparisonName <- 370
testComparisonName <- 371
for(k in 2:testComparisonName) { #For all comparisons
peptideBiomarkerModel <- lm(peptideBiomarkerData[,k] ~ peptideBiomarkerData[,k], na.action = na.omit)
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[k] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[k] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
for(k in 2:testComparisonName) { #For all comparisons
#peptideBiomarkerModel <- lm(peptideBiomarkerData[,k] ~ peptideBiomarkerData[,k], na.action = na.omit)
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[k] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[k] #Specify biomarker
#comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
#comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
comparisonStatistics <- data.frame("Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
testComparisonName <- 370
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit) #Make model
for(k in 1:testComparisonName) { #For all comparisons
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
comparisonStatistics <- data.frame("Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
comparisonStatistics <- data.frame("Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
head(comparisonStatistics) #Confirm changes
for(k in 1:testComparisonName) {
for(i in 2:testPeptides) { #For all peptides
for (j in 41:testBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit) #Make model
comparisonStatistics$Peptide[k] <-  colnames(peptideBiomarkerData)[i] #Specify peptide
comparisonStatistics$Biomarker[k] <- colnames(peptideBiomarkerData)[j] #Specify biomarker
comparisonStatistics$R.Squared[k] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
comparisonStatistics$Slope[k] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
}
rep(x = colnames(peptideBiomarkerData)[2:38], times = 10)
comparisonStatistics$Biomarker <- rep(x = colnames(peptideBiomarkerData)[41:50], times = 10)
comparisonStatistics$Biomarker <- rep(x = colnames(peptideBiomarkerData)[41:50], times = 37)
comparisonStatistics$Peptide[1:10] <- rep(x = colnames(peptideBiomarkerData)[2], times = 10)
View(comparisonStatistics)
comparisonStatistics <- data.frame("Peptide" = rep(x = 0, times = 370),
"Biomarker" = rep(x = 0, times = 370),
"R.Squared" = rep(x = 0, times = 370),
"Slope" = rep(x = 0, times = 370)) #Create empty dataframe to hold all results
head(comparisonStatistics) #Confirm changes
comparisonStatistics$Peptide[1:10] <- rep(x = colnames(peptideBiomarkerData)[2], times = 10)
nPeptideNames <- 37
nPeptideNames <- 36
for(i in 0:nPeptideNames) { #For all peptides
comparisonStatistics$Peptide[((10i) + 1):(10(i + 1))] <- rep(x = colnames(peptideBiomarkerData)[(i + 2)], times = 10)
}
for(i in 0:nPeptideNames) { #For all peptides
comparisonStatistics$Peptide[((10i) + 1):(10*(i + 1))] <- rep(x = colnames(peptideBiomarkerData)[(i + 2)], times = 10)
}
warnings()
for(i in 0:nPeptideNames) { #For all peptides
comparisonStatistics$Peptide[((10*i) + 1):(10*(i + 1))] <- rep(x = colnames(peptideBiomarkerData)[(i + 2)], times = 10)
}
comparisonStatistics$Biomarker <- rep(x = colnames(peptideBiomarkerData)[41:50], times = 37) #Repeat the entire sequence of 10 biomarkers 37 times to meet column limit
nPeptides <- 38 #Columns 2-38 are peptides
nBiomarkers <- 50 #Columns 41-50 are biomarkers
peptideBiomarkerModel
summary(peptideBiomarkerModel)
for(i in 2:nPeptides) { #For all peptides
for (j in 41:nBiomarkers) { #For all biomarkers
print(paste(colnames(peptideBiomarkerData)[i], "vs.", colnames(peptideBiomarkerData)[j]))
}
}
tempStorage <- dataframe("temp" = rep(0, times = 38),
"temp2" = rep(0, times = 38)) #Dataframe created with as many rows as nPeptides
tempStorage <- data.frame("temp" = rep(0, times = 38),
"temp2" = rep(0, times = 38)) #Dataframe created with as many rows as nPeptides
tempRSquaredStorage <- data.frame("temp" = rep(0, times = 38),
"temp2" = rep(0, times = 38)) #Dataframe created with as many rows as nPeptides
for(i in 2:nPeptides) { #For all peptides
for (j in 41:nBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit) #Make model
tempRSquaredStorage[i,j] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
#comparisonStatistics$Slope[1] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
View(tempRSquaredStorage)
model.matrix(tempRSquaredStorage)
tempRSquaredStorage <- matrix(, ncol = 50, nrow = 38) #Create an empty matrix
as.data.frame(as.table(tempRSquaredStorage)) #Convert matrix to dataframe
tempRSquaredStorage <- as.data.frame(as.table(tempRSquaredStorage)) #Convert matrix to dataframe
View(tempRSquaredStorage)
View(tempRSquaredStorage)
tempRSquaredStorage <- data.frame()
View(tempRSquaredStorage)
for(i in 2:nPeptides) { #For all peptides
for (j in 41:nBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit) #Make model
tempRSquaredStorage[i,j] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
#comparisonStatistics$Slope[1] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
tempRSquaredStorage <- data.frame("temp" = rep(0, 50))
tempRSquaredStorage
library(reshape2)
?reshape2
??reshape2
melt(tempRSquaredStorage)
dcast(tempRSquaredStorage)
tempRSquaredStorage <- data.frame("temp" = rep(0, 50))
dcast(tempRSquaredStorage)
dcast(tempRSquaredStorage, temp ~ temp)
dcast(tempRSquaredStorage, temp)
tempRSquaredStorage <- data.frame("temp" = rep(0, 50))
dcast(tempRSquaredStorage, temp)
tempRSquaredStorage <- data.frame("temp" = rep(0, 38))
for(i in 50) {
tempRSquaredStorage[,i] <- data.frame("temp" = rep(0, 38))
}
for(i in 1:50) {
tempRSquaredStorage[,i] <- data.frame("temp" = rep(0, 38))
}
for(i in 1:nBiomarkers) {
tempRSquaredStorage[,i] <- data.frame("temp" = rep(0, 38))
} #
tempRSquaredStorage <- data.frame("temp" = rep(0, nPeptides)) #Create a temporary dataframe for R-squared value storage with the same number of rows as nPeptides
View(tempRSquaredStorage)
for(i in 1:nBiomarkers) {
tempRSquaredStorage[,i] <- data.frame("temp" = rep(0, nPeptides))
} #Add more columns
View(tempRSquaredStorage)
for(i in 2:nPeptides) { #For all peptides
for (j in 41:nBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit) #Make model
tempRSquaredStorage[i,j] <- format(summary(peptideBiomarkerModel)$adj.r.squared, digits = 4) #Adjusted R-squared
#comparisonStatistics$Slope[1] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
View(tempRSquaredStorage)
head(tempRSquaredStorage)
tempRSquaredStorage <- tempRSquaredStorage[2:nPeptides,41:nBiomarkers] #Remove empty columns and rows
head(tempRSquaredStorage) #Confirm changes
comparisonStatistics$R.Squared[1:10] <- tempRSquaredStorage[,1]
comparisonStatistics$R.Squared[1:10] <- tempRSquaredStorage[1,]
for(i in 0:nPeptideNames) { #For all peptides
comparisonStatistics$R.Squared[((10*i) + 1):(10*(i + 1))] <- tempRSquaredStorage[(i + 1),]
} #Transfer R-squared values from tempRSquaredStorage to comparisonStatistics
View(comparisonStatistics)
head(comparisonStatistics) #Confirm addition
tempSlopeStorage <- data.frame("temp" = rep(0, nPeptides)) #Create a temporary dataframe for R-squared value storage with the same number of rows as nPeptides
for(i in 1:nBiomarkers) {
tempSlopeStorage[,i] <- data.frame("temp" = rep(0, nPeptides))
} #Add more columns so the final dataframe has the same number of columns as nBiomarkers
for(i in 2:nPeptides) { #For all peptides
for (j in 41:nBiomarkers) { #For all biomarkers
peptideBiomarkerModel <- lm(peptideBiomarkerData[,i] ~ peptideBiomarkerData[,j], na.action = na.omit) #Make model
tempSlopeStorage[i,j] <- format(summary(peptideBiomarkerModel)$coeff[2], digits = 4) #Regression's slope
}
}
head(tempSlopeStorage) #Confirm changes
tempSlopeStorage <- tempSlopeStorage[2:nPeptides,41:nBiomarkers] #Remove empty columns and rows
head(tempSlopeStorage) #Confirm changes
for(i in 0:nPeptideNames) { #For all peptides
comparisonStatistics$Slope[((10*i) + 1):(10*(i + 1))] <- tempSlopeStorage[(i + 1),]
} #Transfer R-squared values from tempSlopeStorage to comparisonStatistics
head(comparisonStatistics) #Confirm addition
View(comparisonStatistics)
getwd()
write.csv(comparisonStatistics, "2017-12-13-Peptide-Biomarker-Regression-Statistics.csv") #Write out table as .csv
write.csv(comparisonStatistics, "2017-12-13-Peptide-Biomarker-Regression-Statistics.csv") #Write out table as .csv
as.numeric(comparisonStatistics$R.Squared)
is.numeric(comparisonStatistics$R.Squared)
View(comparisonStatistics)
comparisonStatistics$R.Squared <- as.numeric(comparisonStatistics$R.Squared)
is.numeric(comparisonStatistics$R.Squared)
comparisonStatistics$Slope <- as.numeric(comparisonStatistics$Slope) #Convert to numeric values
is.numeric(comparisonStatistics$Slope) #Confirm changes
write.csv(comparisonStatistics, "2017-12-13-Peptide-Biomarker-Regression-Statistics.csv") #Write out table as .csv
