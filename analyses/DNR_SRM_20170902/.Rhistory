head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Shapes <- c(rep(x = 16, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Bare")),
rep(x = 17, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Eelgrass"))) #Make a shape vector
NMDSColorShapeCustomization[,5] <- NMDS.Shapes #Add the shape vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Sample.Number),] #Resort by sample number
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
colnames(NMDSColorShapeCustomization) <- c("Sample.Number", "Site", "Eelgrass.Condition", "Color", "Shape") #Change column names
head(NMDSColorShapeCustomization) #Confirm change
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type='none', display='sites', xlab='Axis 1', ylab='Axis 2', cex=0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
dissimArea4.t <- vegdist(area4.t, "euclidean") #Calculate dissimilarity matrix
ANOSIMReplicates <- biologicalReplicates[c(1:49),] #Subset sample numbers used as IDs in ANOSIM
row.names(ANOSIMReplicates) <- ANOSIMReplicates[,1] #Assign sample numbers as row names
ANOSIMReplicates <- ANOSIMReplicates[,-1] #Remove Sample.Number column
head(ANOSIMReplicates) #Confirm changes
str(ANOSIMReplicates) #Examine structure
ANOSIMReplicates$Site <- factor(ANOSIMReplicates$Site) #Make sure only preesnt factors are recognized
ANOSIMReplicates$Eelgrass.Condition <- factor(ANOSIMReplicates$Eelgrass.Condition) #Make sure only preesnt factors are recognized
str(ANOSIMReplicates) #Confirm structure
siteANOSIM <- anosim(dat = dissimArea4.t, grouping = ANOSIMReplicates[,1]) #One-way ANOSIM by Site
summary(siteANOSIM)
plot(siteANOSIM)
for(i in 1:(length(area2.t)-1)) {
BarplotsTechnicalReplicateAverages[i,] <- average(area2.t[i,], area2.t[i+1,]) #Find the mean
BarplotsTechnicalReplicateSE[i,] <- sqrt(var(area2.t[i,], area2.t[i+1,])) #Find the SE
}
for(i in 1:(length(area2.t)-1)) {
BarplotsTechnicalReplicateAverages[i,] <- mean(area2.t[i,], area2.t[i+1,]) #Find the mean
BarplotsTechnicalReplicateSE[i,] <- sqrt(var(area2.t[i,], area2.t[i+1,])) #Find the SE
}
BarplotsTechnicalReplicateAverages
dissimArea4.t <- vegdist(area4.t, "euclidean") #Calculate dissimilarity matrix
ANOSIMReplicates <- biologicalReplicates[c(1:49),] #Subset sample numbers used as IDs in ANOSIM
row.names(ANOSIMReplicates) <- ANOSIMReplicates[,1] #Assign sample numbers as row names
ANOSIMReplicates <- ANOSIMReplicates[,-1] #Remove Sample.Number column
head(ANOSIMReplicates) #Confirm changes
str(ANOSIMReplicates) #Examine structure
ANOSIMReplicates$Site <- factor(ANOSIMReplicates$Site) #Make sure only preesnt factors are recognized
ANOSIMReplicates$Eelgrass.Condition <- factor(ANOSIMReplicates$Eelgrass.Condition) #Make sure only preesnt factors are recognized
str(ANOSIMReplicates) #Confirm structure
siteANOSIM <- anosim(dat = dissimArea4.t, grouping = ANOSIMReplicates[,1]) #One-way ANOSIM by Site
summary(siteANOSIM)
area2.protID #From 2017-09-06-NMDS-for-Technical-Replication
area2.protID <- data.frame(area2.protID)
area2.protID #From 2017-09-06-NMDS-for-Technical-Replication
area.protID2 #From 2017-09-06-NMDS-for-Technical-Replication
area.protID2 <- data.frame(area2.protID) #Save as a data.frame
area.protID2 <- data.frame(area.protID2) #Save as a data.frame
str(area2.t)
area.protID2 <- data.frame(area.protID2) #Save as a data.frame
str(area.protID2)
mean(area.protID2[,i], area.protID2[,i+1])
ave(area.protID2[,i], area.protID2[,i+1])
str(area2.t)
area2.t <- data.frame(area2.t)
ave(area2.t[i,], area2.t[i+1,])
sqrt(var(area.protID2[,i], area.protID2[,i+1]))
ave(area.protID2[,i], area.protID2[,i+1])
var(area.protID2[,i], area.protID2[,i+1])
sqrt(var(area.protID2[1,i], area.protID2[1,i+1]))
sd(area.protID2[,i], area.protID2[,i+1])
?sd
?se
SRMData #From 2017-09-06-NMDS-for-Technical-Replication
SRMDataNMDSAveragedCorrected #From 2017-09-06-NMDS-for-Technical-Replication
boxplot(SRMDataNMDSAveragedCorrected)
boxplot(SRMDataNMDSAveragedCorrected[1,])
boxplot(SRMDataNMDSAveragedCorrected[1,])
boxplot(SRMDataNMDSAveragedCorrected)
?boxplot
boxplot(SRMDataNMDSAveragedCorrected$`O01-1`)
boxplot(t(SRMDataNMDSAveragedCorrected))
boxplotData <- t(SRMDataNMDSAveragedCorrected)
boxplotData
boxplotData <- data.frame(t(SRMDataNMDSAveragedCorrected))
boxplotData
boxplot(boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR.y10)
boxplotData <- data.frame(t(SRMDataNMDSAveragedCorrected))
boxplot(boxplotData)
biologicalReplicates
rownames(biologicalReplicates) <- biologicalReplicates$Site
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number
merge(x = boxplotData, y = biologicalReplicates, by = rownames(boxplotData))
boxplotData$Sample.Number <- rownames(boxplotData) #Save rownames as a new column
merge(x = boxplotData, y = biologicalReplicates, by = Sample.Number)
biologicalReplicates
merge(x = boxplotData, y = biologicalReplicates, by = Sample.Number)
boxplotData
merge(x = boxplotData, y = biologicalReplicates, by = Sample.Number)
boxplotData
head(boxplotData)
head(biologicalReplicates) #Confirm chagnes
head(biologicalReplicates) #Confirm changes
Sample.Number
boxplotData <- merge(x = boxplotData, y = biologicalReplicates, by = Sample.Number)
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by = Sample.Number)
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by,y = Sample.Number)
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by.y = Sample.Number)
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by = "Sample.Number")
head(boxplotData)
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
head(boxplotData) #Confirm changes
CaseInlet <- subset(x = boxplotData, subset = boxplotData$Site == "CI")
FidalgoBay <- subset(x = boxplotData, subset = boxplotData$Site == "FB")
PortGamble <- subset(x = boxplotData, subset = boxplotData$Site == "PG")
SkokomishRiver <- subset(x = boxplotData, subset = boxplotData$Site == "SK")
WillapaBay <- subset(x = boxplotData, subset = boxplotData$Site == "WB")
CaseInlet
boxplotData
View(boxplotData)
View(CaseInlet)
boxplot(boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR.y10 ~ boxplotData$Site)
boxplot(boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR.y10 ~ boxplotData$Site + boxplotData$Eelgrass.Condition)
boxplot(boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR.y10 ~ boxplotData$Site)
str(boxplotData)
boxplotData$Site <- as.factor(boxplotData$Site)
boxplotData$Eelgrass.Condition <- as.factor(boxplotData$Eelgrass.Condition)
str(boxplotData)
boxplotData$Site <- as.factor(boxplotData$Site)
str(boxplotData)
biologicalReplicates$Site
View(biologicalReplicates)
biologicalReplicates <- biologicalReplicates[,-c(50,100)] #Remove blanks
biologicalReplicates$Site
biologicalReplicates <- biologicalReplicates[-c(50,100),] #Remove blanks
biologicalReplicates$Site
biologicalReplicates$Site <- as.factor(biologicalReplicates$Site)
biologicalReplicates$Eelgrass.Condition <- as.factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
biologicalReplicates$Site <- as.factor(biologicalReplicates$Site) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
unique(biologicalReplicates$Site)
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by = "Sample.Number") #Merge together
biologicalReplicates <- read.csv("2017-09-06-Biological-Replicate-Information.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number #Set sample number as row names
head(biologicalReplicates) #Confirm changes
biologicalReplicates <- biologicalReplicates[-c(50,100),] #Remove blanks
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by = "Sample.Number") #Merge together
boxplotData
boxplotData$Site
View(boxplotData)
boxplotData$Site <- factor(boxplotData$Site)
boxplotData$Eelgrass.Condition <- factor(boxplotData$Eelgrass.Condition)
SRMDataNMDSAveragedCorrected #From 2017-09-06-NMDS-for-Technical-Replication. Average normalized area data.
boxplotData <- data.frame(t(SRMDataNMDSAveragedCorrected)) #Transpose the data
boxplotData$Sample.Number <- rownames(boxplotData) #Save rownames as a new column
head(boxplotData) #Confirm changes
biologicalReplicates <- read.csv("2017-09-06-Biological-Replicate-Information.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number #Set sample number as row names
head(biologicalReplicates) #Confirm changes
biologicalReplicates <- biologicalReplicates[-c(50,100),] #Remove blanks
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = boxplotData, by = "Sample.Number") #Merge together
head(boxplotData) #Confirm merge
boxplotData$Site <- factor(boxplotData$Site)
boxplotData$Eelgrass.Condition <- factor(boxplotData$Eelgrass.Condition)
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
head(boxplotData) #Confirm changes
boxplot(boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR.y10 ~ boxplotData$Site)
nTransitions <- length(boxplotData)
View(boxplotData)
nTransitions <- (length(boxplotData) - 2) #The number of columns with unique transition IDs
boxplot(boxplotData[,3] ~ boxplotData$Site) #Make b
0:nTransitions
nTransitions <- (length(boxplotData)) #The number of columns in the dataframe. The first 2 columns are Site and Eelgrass.Condition
3:nTransitions
colname(boxplotData[,1])
col.name(boxplotData[,1])
colnames(boxplotData[,1])
colnames(boxplotData[,3])
colnames(boxplotData)
boxplotFilenames <- colnames(boxplotData)
boxplotFilenames[1]
boxplot(boxplotData[,3] ~ boxplotData$Site, main = boxplotFilenames[3], xlab = "Sites", ylab = "Abundance")
fileName <- boxplotFilenames[i] #Set the file name
jpeg(filename = fileName, width = 1000, height = 1000) #Save using set file name
boxplot(boxplotData[,i] ~ boxplotData$Site, main = boxplotFilenames[i], xlab = "Sites", ylab = "Abundance")
dev.off()
boxplot(boxplotData[,i] ~ boxplotData$Site, main = boxplotFilenames[i], xlab = "Sites", ylab = "Abundance")
boxplot(boxplotData[,3] ~ boxplotData$Site, main = boxplotFilenames[3], xlab = "Sites", ylab = "Abundance")
fileName <- boxplotFilenames[3] #Set the file name
jpeg(filename = fileName, width = 1000, height = 1000) #Save using set file name
boxplot(boxplotData[,3] ~ boxplotData$Site, main = boxplotFilenames[3], xlab = "Sites", ylab = "Abundance")
dev.off()
for(i in 3:nTransitions) { #For all of my columns with transition IDs
fileName <- boxplotFilenames[i] #Set the file name
jpeg(filename = fileName, width = 1000, height = 1000) #Save using set file name
boxplot(boxplotData[,i] ~ boxplotData$Site, xlab = "Sites", ylab = "Abundance") #Create the boxplot
dev.off() #Close file
}
boxplotFilenames$mod <- rep("Eelgrass", 113)
boxplotFilenames[,2] <- rep("Eelgrass", 113)
boxplotFilenames <- data.frame(boxplotFilenames = boxplotFilenames,
modifier = rep("Eelgrass", 113))
View(boxplotFilenames)
boxplotFilenames <- data.frame(filenames = colnames(boxplotData),
modifier = rep("Eelgrass", 113))
boxplotFilenames$Eelgrass <- paste(boxplotFilenames$filenames, boxplotFilenames$modifier)
View(boxplotFilenames)
boxplot(boxplotData[,5] ~ boxplotData$Site + boxplotData$Eelgrass.Condition, xlab = "Sites", ylab = "Abundance") #Create the boxplot
boxplot(boxplotData[,5] ~ boxplotData$Site + boxplotData$Eelgrass.Condition, main = boxplotFilenames[3,5], xlab = "Sites", ylab = "Abundance") #Create the boxplot
boxplot(boxplotData[,5] ~ boxplotData$Site + boxplotData$Eelgrass.Condition, main = boxplotFilenames$Eelgrass[5], xlab = "Sites", ylab = "Abundance") #Create the boxplot
?boxplot
boxplot(boxplotData[,5] ~ boxplotData$Site + boxplotData$Eelgrass.Condition, main = boxplotFilenames$Eelgrass[5], xlab = "Sites", ylab = "Abundance", names = c("CI.Bare", "FB.Bare","PG.Bare", "SK.Bare", "WB.Bare", "CI.Eelgrass", "FB.Eelgrass", "PG.Eelgrass", "SK.Eelgrass", "WB.Eelgrass"))
for(i in 3:nTransitions) { #For all of my columns with transition IDs
fileName <- boxplotFilenames$Eelgrass[i] #Set the file name choices as the third column
jpeg(filename = fileName, width = 1000, height = 1000) #Save using set file name
boxplot(boxplotData[,i] ~ boxplotData$Site + boxplotData$Eelgrass.Condition, xlab = "Sites", ylab = "Abundance", names = c("CI.Bare", "FB.Bare", "PG.Bare", "SK.Bare", "WB.Bare", "CI.Eelgrass", "FB.Eelgrass", "PG.Eelgrass", "SK.Eelgrass", "WB.Eelgrass")) #Create the boxplot
dev.off() #Close file
}
SRMAreas <- read.csv("2017-09-12-Gigas-SRM-ReplicatesOnly-PostDilutionCurve-NoPivot-RevisedSettings-Report.csv", na.strings = "#N/A") #Specify Skyline's special way of designating N/A values
head(SRMAreas) #Confirm import
tail(SRMAreas) #Confirm import
sequenceFile <- read.csv("2017-07-28-SRM-Samples-Sequence-File.csv", na.strings = "N/A") # Import sequence file
head(sequenceFile) #Confirm import
sequenceFile <- sequenceFile[,c(2,3,8)] #Keep the Replicate.Name, Comment and TIC columns
names(sequenceFile) <- c("Replicate.Name", "Sample.Number", "TIC")
head(sequenceFile) #Confirm change
masterSRMData <- merge(x = SRMAreas, y = sequenceFile, by = "Replicate.Name") #Merge the sample names and replicate names to use for analysis.
head(masterSRMData) #Confirm merge
tail(masterSRMData) #Confirm merge
biologicalReplicates <- read.csv("2017-09-06-Biological-Replicate-Information.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
tail(biologicalReplicates) #Confirm import
masterSRMDataBiologicalReplicates <- merge(x = masterSRMData, y = biologicalReplicates, by = "Sample.Number") #Add biological replicate information to master list.
head(masterSRMDataBiologicalReplicates) #Confirm change
SRMDataNMDS <- masterSRMDataBiologicalReplicates #Duplicate master list into a new dataframe
head(SRMDataNMDS) #Confirm copy
tail(SRMDataNMDS) #Confirm copy
SRMDataNMDS <- SRMDataNMDS[,-c(2, 5, 7, 10, 11)] #Remove extraneous columns: Replicate.Name, Transition, Peptide.Retention.Time, Site, Eelgrass
head(SRMDataNMDS) #Confirm column removal
SRMDataNMDS <- SRMDataNMDS[! SRMDataNMDS$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data
head(SRMDataNMDS) #Confirm removal
transform(SRMDataNMDS, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(SRMDataNMDS$Area) #Confirm change
transform(SRMDataNMDS, TIC = as.numeric(TIC)) #Make sure TIC is recognized as a numeric variable
is.numeric(SRMDataNMDS$TIC) #Confirm change
SRMDataNonNormalizedNMDS <- SRMDataNMDS #Create a duplicate dataframe
SRMDataNonNormalizedNMDS <- SRMDataNMDS[,-6] #Remove TIC column
head(SRMDataNonNormalizedNMDS) #Confirm creation
library(reshape2) #Instal package to pivot table
SRMDataNMDSNonNormalizedPivoted <- dcast(SRMDataNonNormalizedNMDS, Protein.Name + Peptide.Sequence + Fragment.Ion ~ Sample.Number) #Cast table! Protein/Peptides/Transitions remain as columns with Sample Number as column headers. Normalized.Area used as value column by default.
head(SRMDataNMDSNonNormalizedPivoted) #Confirm cast.
SRMDataNMDSNonNormalizedPivoted$RowNames <- paste(SRMDataNMDSNonNormalizedPivoted$Protein.Name, SRMDataNMDSNonNormalizedPivoted$Peptide.Sequence, SRMDataNMDSNonNormalizedPivoted$Fragment.Ion) #Merge Protein, Peptide and Transition information into one column
head(SRMDataNMDSNonNormalizedPivoted) #Confirm column merge
SRMDataNMDSNonNormalizedPivoted <- SRMDataNMDSNonNormalizedPivoted[,-c(1:3)] #Remove unmerged columns
SRMAreas <- read.csv("2017-09-12-Gigas-SRM-ReplicatesOnly-PostDilutionCurve-NoPivot-RevisedSettings-Report.csv", na.strings = "#N/A") #Specify Skyline's special way of designating N/A values
head(SRMAreas) #Confirm import
tail(SRMAreas) #Confirm import
sequenceFile <- read.csv("2017-07-28-SRM-Samples-Sequence-File.csv", na.strings = "N/A") # Import sequence file
head(sequenceFile) #Confirm import
sequenceFile <- sequenceFile[,c(2,3,8)] #Keep the Replicate.Name, Comment and TIC columns
names(sequenceFile) <- c("Replicate.Name", "Sample.Number", "TIC")
head(sequenceFile) #Confirm change
masterSRMData <- merge(x = SRMAreas, y = sequenceFile, by = "Replicate.Name") #Merge the sample names and replicate names to use for analysis.
head(masterSRMData) #Confirm merge
tail(masterSRMData) #Confirm merge
biologicalReplicates <- read.csv("2017-09-06-Biological-Replicate-Information.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
tail(biologicalReplicates) #Confirm import
masterSRMDataBiologicalReplicates <- merge(x = masterSRMData, y = biologicalReplicates, by = "Sample.Number") #Add biological replicate information to master list.
head(masterSRMDataBiologicalReplicates) #Confirm change
SRMDataNMDS <- masterSRMDataBiologicalReplicates #Duplicate master list into a new dataframe
head(SRMDataNMDS) #Confirm copy
tail(SRMDataNMDS) #Confirm copy
SRMDataNMDS <- SRMDataNMDS[,-c(2, 5, 7, 10, 11)] #Remove extraneous columns: Replicate.Name, Transition, Peptide.Retention.Time, Site, Eelgrass
head(SRMDataNMDS) #Confirm column removal
SRMDataTargetsOnly <- masterSRMDataBiologicalReplicates #Duplicate master list into a new dataframe
SRMDataTargetsOnly <- SRMDataTargetsOnly[,-c(2, 5, 7, 10, 11)] #Remove extraneous columns: Replicate.Name, Transition, Peptide.Retention.Time, Site, Eelgrass
head(SRMDataTargetsOnly) #Confirm column removal
SRMDataPRTCOnly <- SRMDataNMDS[SRMDataNMDS$Protein.Name %in% "PRTC peptides", ] #Save PRTC peptide data as a new dataframe
SRMDataPRTCOnly <- SRMDataTargetsOnly[SRMDataTargetsOnly$Protein.Name %in% "PRTC peptides", ] #Save PRTC peptide data as a new dataframe
SRMDataTargetsOnly <- SRMDataTargetsOnly[! SRMDataTargetsOnly$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data from target protein dataframe
head(SRMDataTargetsOnly) #Confirm removal
transform(SRMDataTargetsOnly, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(SRMDataTargetsOnly$Area) #Confirm change
transform(SRMDataTargetsOnly, TIC = as.numeric(TIC)) #Make sure TIC is recognized as a numeric variable
is.numeric(SRMDataTargetsOnly$TIC) #Confirm change
SRMDataTargetsOnly <- SRMDataTargetsOnly[,-6] #Remove TIC column
head(SRMDataTargetsOnly) #Confirm creation
library(reshape2) #Instal package to pivot table
SRMDataTargetsOnlyPivoted <- dcast(SRMDataTargetsOnly, Protein.Name + Peptide.Sequence + Fragment.Ion ~ Sample.Number) #Cast table! Protein/Peptides/Transitions remain as columns with Sample Number as column headers. Normalized.Area used as value column by default.
head(SRMDataTargetsOnlyPivoted) #Confirm cast.
SRMDataTargetsOnlyPivoted$RowNames <- paste(SRMDataTargetsOnlyPivoted$Protein.Name, SRMDataTargetsOnlyPivoted$Peptide.Sequence, SRMDataTargetsOnlyPivoted$Fragment.Ion) #Merge Protein, Peptide and Transition information into one column
head(SRMDataTargetsOnlyPivoted) #Confirm column merge
SRMDataTargetsOnlyPivoted <- SRMDataTargetsOnlyPivoted[,-c(1:3)] #Remove unmerged columns
head(SRMDataTargetsOnlyPivoted) #Confirm column removal
plot(x= SRMDataTargetsOnlyPivoted$`O01-1`, y = SRMDataTargetsOnlyPivoted$`O01-2`)
plot(x= SRMDataTargetsOnlyPivoted$`O135-1`, y = SRMDataTargetsOnlyPivoted$`O135-2`)
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivoted #Duplicate dataframe
SRMDataTargetsOnlyPivotedCorrected[is.na(SRMDataTargetsOnlyPivotedCorrected)] <- 0 #Replace NAs with 0s
head(SRMDataTargetsOnlyPivotedCorrected) #Confirm there are no NAs
plot(x= SRMDataTargetsOnlyPivotedCorrected$`O135-1`, y = SRMDataTargetsOnlyPivotedCorrected$`O135-2`)
plot(x= SRMDataTargetsOnlyPivotedCorrected$`O124-1`, y = SRMDataTargetsOnlyPivotedCorrected$`O124-2`)
SRMDataTargetsOnly
SRMDataTargetsOnlyPivotedCorrected
rownames(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected$RowNames
rownames(SRMDataTargetsOnlyPivotedCorrected) #Confirm changes
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivotedCorrected[, -c(SRMDataTargetsOnlyPivotedCorrected$RowNames)] #Remove RowNames column
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivotedCorrected[, ! SRMDataTargetsOnlyPivotedCorrected$RowNames] #Remove RowNames column
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivotedCorrected[! SRMDataTargetsOnlyPivotedCorrected$RowNames] #Remove RowNames column
SRMDataTargetsOnlyPivotedCorrected <- rm(SRMDataTargetsOnlyPivotedCorrected$RowNames) #Remove RowNames column
SRMDataTargetsOnlyPivotedCorrected <- subset(SRMDataTargetsOnlyPivotedCorrected, select = -c(RowNames)) #Remove RowNames column
head(SRMDataTargetsOnlyPivotedCorrected)
plot(x= SRMDataTargetsOnlyPivotedCorrected$`O137-1`, y = SRMDataTargetsOnlyPivotedCorrected$`O137-2`)
SRMDataTargetsOnly
View(SRMDataTargetsOnly)
SRMDataTargetsOnlyPivotedCorrected
View(SRMDataPRTCOnly)
View(masterSRMData)
View(masterSRMDataBiologicalReplicates)
SRMDataTargetsOnlyPivotedCorrected
length(SRMDataTargetsOnlyPivotedCorrected)
(from = 1, to = (length(SRMDataTargetsOnlyPivotedCorrected)-1), by = 2)
SRMDataTargetsOnlyPivotedCorrected[1, c(from = 1, to = 91, by = 1)]
length(SRMDataTargetsOnlyPivotedCorrected) - 1
SRMDataTargetsReplicateOne <- SRMDataTargetsOnlyPivotedCorrected[, c(from = 1, to = (length(SRMDataTargetsOnlyPivotedCorrected) - 1), by = 1)]
SRMDataTargetsReplicateOne
SRMDataTargetsReplicateOne <- SRMDataTargetsOnlyPivotedCorrected[, c(from = 1, to = (length(SRMDataTargetsOnlyPivotedCorrected) - 1), by = 2)]
SRMDataTargetsReplicateOne
SRMDataTargetsReplicateOne <- SRMDataTargetsOnlyPivotedCorrected[, c(from = 1, to = 91, by = 2)]
SRMDataTargetsReplicateOne
SRMDataTargetsOnlyPivotedCorrected
SRMDataTargetsOnlyPivotedCorrected[, c(from = 1, to = 91, by = 2)]
SRMDataTargetsOnlyPivotedCorrected[, c(from = 1, to = 92, by = 2)]
seq(from = 1, to = 91, by = 2)
SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 1, to = 91, by = 2))]
length(SRMDataTargetsOnlyPivotedCorrected) - 1
SRMDataTargetsReplicateOne <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 1, to = (length(SRMDataTargetsOnlyPivotedCorrected) - 1), by = 2))] #Subset all odd columns (first replicate)
colnames(SRMDataTargetsReplicateOne)
SRMDataTargetsReplicateTwo <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 1, to = length(SRMDataTargetsOnlyPivotedCorrected), by = 2))] #Subset all even columns (first replicate)
colnames(SRMDataTargetsReplicateTwo) #Confirm subset
SRMDataTargetsReplicateTwo <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 2, to = length(SRMDataTargetsOnlyPivotedCorrected), by = 2))] #Subset all even columns (first replicate)
colnames(SRMDataTargetsReplicateTwo) #Confirm subset
SRMDataTransposedReplicateOne <- t(SRMDataTargetsReplicateOne)
head(SRMDataTransposedReplicateOne)
SRMDataTransposedReplicateTwo <- t(SRMDataTargetsReplicateTwo) #Transpose Replicate 2 dataframe
head(SRMDataTransposedReplicateTwo) #Confirm transposition
plot(x= SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1]) #x = first column of first dataframe, y = first column of second dataframe
plot(x= SRMDataTransposedReplicateOne[,2], y = SRMDataTransposedReplicateTwo[,2]) #x = first column of first dataframe, y = first column of second dataframe
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8]) #x = first column of first dataframe, y = first column of second dataframe
nColumns <- length(SRMDataTransposedReplicateOne)
nColumns
nColumns <- length(SRMDataTargetsReplicateTwo)
nColumns
View(SRMDataTransposedReplicateOne)
nrow(SRMDataTargetsReplicateOne)
nTransitions <- nrow(SRMDataTargetsReplicateOne) #Number of transitions used
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep(".jpeg", 111))
correlationFilenames$full <- paste(correlationFilenames$filenames, correlationFilenames$modifier) #Merge the two columns together in a third column. This column has the full filename that will be used
head(correlationFilenames) #Confirm changes
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8]) #x = first column of first dataframe, y = first column of second dataframe
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$full[1]) #x = first column of first dataframe, y = first column of second dataframe
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
SRMDataTransposedReplicateTwo
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], labels = rownames(SRMDataTransposedReplicateTwo)) #x = first column of first dataframe, y = first column of second dataframe
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
text(x = SRMDataTransposedReplicateOne, y = SRMDataTransposedReplicateTwo, labels = rownames(SRMDataTransposedReplicateOne, pos = 3))
text(x = SRMDataTransposedReplicateOne, y = SRMDataTransposedReplicateTwo, labels = rownames(SRMDataTransposedReplicateOne), pos = 3)
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
text(x = SRMDataTransposedReplicateOne, y = SRMDataTransposedReplicateOne, labels = rownames(SRMDataTransposedReplicateOne), pos = 3)
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
text(x = SRMDataTransposedReplicateOne, y = SRMDataTransposedReplicateTwo, labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7)
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
text(labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7)
?text
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7, pos = 3)
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7, pos = 1)
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
sedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7, po
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7, pos = 1)
plot(xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1]) #x = first column of first dataframe, y = first column of second dataframe
?plot
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #x = first column of first dataframe, y = first column of second dataframe
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7, pos = 1)
abline(SRMDataTransposedReplicateOne, SRMDataTransposedReplicateTwo)
abline(SRMDataTransposedReplicateTwo ~ SRMDataTransposedReplicateOne) #Plot regression
abline(lm(SRMDataTransposedReplicateTwo ~ SRMDataTransposedReplicateOne)) #Plot regression
abline(lm(SRMDataTransposedReplicateTwo[,8] ~ SRMDataTransposedReplicateOne[,8])) #Plot regression
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #x = first column of first dataframe, y = first column of second dataframe
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7, pos = 1)
abline(lm(SRMDataTransposedReplicateTwo[,8] ~ SRMDataTransposedReplicateOne[,8])) #Plot regression
transitionModel <- lm(SRMDataTransposedReplicateTwo[,8] ~ SRMDataTransposedReplicateOne[,8]) #Predict Replicate 2 from Replicate 1
summary(transitionModel)
anova(transitionModel)
print(summary(transitionModel))
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #Create plot, but do not plot points.
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7)
summary(transitionModel)$adj.r.squared
abline(transitionModel) #Plot regression
plot(x= SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,8], y = SRMDataTransposedReplicateTwo[,8], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
summary(transitionModel)$mse
summary(transitionModel)$se
summary(transitionModel)$standard.error
summary(transitionModel)
?summary
summary(transitionModel)[1]
summary(transitionModel)[2]
summary(transitionModel)[3]
summary(transitionModel)[4]
summary(transitionModel)[5]
summary(transitionModel)$coefficients
summary(transitionModel)$coefficients[1]
summary(transitionModel)$coefficients[2]
summary(transitionModel)$coefficients[3]
summary(transitionModel)$coefficients[4]
mse <- summary(transitionModel)$coefficients[4] #Calculate mSE using residual standard error
ssx <- sum((transitionModel$SRMDataTransposedReplicateOne[,8] - mean(transitionModel$SRMDataTransposedReplicateOne[,8]))^2)
ssx <- sum((transitionModel$xlevels - mean(transitionModel$xlevels)^2))
nTransitions <- nrow(SRMDataTargetsReplicateOne) #Number of transitions used
SRMAreas <- read.csv("2017-09-12-Gigas-SRM-ReplicatesOnly-PostDilutionCurve-NoPivot-RevisedSettings-Report.csv", na.strings = "#N/A") #Specify Skyline's special way of designating N/A values
head(SRMAreas) #Confirm import
tail(SRMAreas) #Confirm import
sequenceFile <- read.csv("2017-07-28-SRM-Samples-Sequence-File.csv", na.strings = "N/A") # Import sequence file
head(sequenceFile) #Confirm import
sequenceFile <- sequenceFile[,c(2,3,8)] #Keep the Replicate.Name, Comment and TIC columns
names(sequenceFile) <- c("Replicate.Name", "Sample.Number", "TIC")
head(sequenceFile) #Confirm change
masterSRMData <- merge(x = SRMAreas, y = sequenceFile, by = "Replicate.Name") #Merge the sample names and replicate names to use for analysis.
head(masterSRMData) #Confirm merge
tail(masterSRMData) #Confirm merge
biologicalReplicates <- read.csv("2017-09-06-Biological-Replicate-Information.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
tail(biologicalReplicates) #Confirm import
masterSRMDataBiologicalReplicates <- merge(x = masterSRMData, y = biologicalReplicates, by = "Sample.Number") #Add biological replicate information to master list.
head(masterSRMDataBiologicalReplicates) #Confirm change
SRMDataTargetsOnly <- masterSRMDataBiologicalReplicates #Duplicate master list into a new dataframe
head(SRMDataTargetsOnly) #Confirm copy
tail(SRMDataTargetsOnly) #Confirm copy
SRMDataTargetsOnly <- SRMDataTargetsOnly[,-c(2, 5, 7, 10, 11)] #Remove extraneous columns: Replicate.Name, Transition, Peptide.Retention.Time, Site, Eelgrass
head(SRMDataTargetsOnly) #Confirm column removal
SRMDataTargetsOnly <- SRMDataTargetsOnly[! SRMDataTargetsOnly$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data from target protein dataframe
head(SRMDataTargetsOnly) #Confirm removal
transform(SRMDataTargetsOnly, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(SRMDataTargetsOnly$Area) #Confirm change
transform(SRMDataTargetsOnly, TIC = as.numeric(TIC)) #Make sure TIC is recognized as a numeric variable
is.numeric(SRMDataTargetsOnly$TIC) #Confirm change
SRMDataTargetsOnly <- SRMDataTargetsOnly[,-6] #Remove TIC column
head(SRMDataTargetsOnly) #Confirm creation
library(reshape2) #Instal package to pivot table
SRMDataTargetsOnlyPivoted <- dcast(SRMDataTargetsOnly, Protein.Name + Peptide.Sequence + Fragment.Ion ~ Sample.Number) #Cast table! Protein/Peptides/Transitions remain as columns with Sample Number as column headers. Normalized.Area used as value column by default.
head(SRMDataTargetsOnlyPivoted) #Confirm cast.
SRMDataTargetsOnlyPivoted$RowNames <- paste(SRMDataTargetsOnlyPivoted$Protein.Name, SRMDataTargetsOnlyPivoted$Peptide.Sequence, SRMDataTargetsOnlyPivoted$Fragment.Ion) #Merge Protein, Peptide and Transition information into one column
head(SRMDataTargetsOnlyPivoted) #Confirm column merge
SRMDataTargetsOnlyPivoted <- SRMDataTargetsOnlyPivoted[,-c(1:3)] #Remove unmerged columns
head(SRMDataTargetsOnlyPivoted) #Confirm column removal
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivoted #Duplicate dataframe
SRMDataTargetsOnlyPivotedCorrected[is.na(SRMDataTargetsOnlyPivotedCorrected)] <- 0 #Replace NAs with 0s
head(SRMDataTargetsOnlyPivotedCorrected) #Confirm there are no NAs
rownames(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected$RowNames #Set RowNames column as dataframe rownames
SRMDataTargetsOnlyPivotedCorrected <- subset(SRMDataTargetsOnlyPivotedCorrected, select = -c(RowNames)) #Remove RowNames column
head(SRMDataTargetsOnlyPivotedCorrected) #Confirm changes
SRMDataTargetsReplicateOne <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 1, to = (length(SRMDataTargetsOnlyPivotedCorrected) - 1), by = 2))] #Subset all odd columns (first replicate)
colnames(SRMDataTargetsReplicateOne) #Confirm subset
SRMDataTargetsReplicateTwo <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 2, to = length(SRMDataTargetsOnlyPivotedCorrected), by = 2))] #Subset all even columns (first replicate)
colnames(SRMDataTargetsReplicateTwo) #Confirm subset
SRMDataTransposedReplicateOne <- t(SRMDataTargetsReplicateOne) #Transpose Replicate 1 dataframe
head(SRMDataTransposedReplicateOne) #Confirm transposition
SRMDataTransposedReplicateTwo <- t(SRMDataTargetsReplicateTwo) #Transpose Replicate 2 dataframe
head(SRMDataTransposedReplicateTwo) #Confirm transposition
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep(".jpeg", 111)) #Make a dataframe of filenames
correlationFilenames$full <- paste(correlationFilenames$filenames, correlationFilenames$modifier) #Merge the two columns together in a third column. This column has the full filename that will be used
head(correlationFilenames) #Confirm changes
nTransitions <- nrow(SRMDataTargetsReplicateOne) #Number of transitions used
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
dev.off() #Turn off plotting mechanism
}
?setwd #Change working directory so files are saved in the same directory as the R script
getwd
getwd()
getwd() #Change working directory so files are saved in the same directory as the R script
setwd(dir = "2017-10-10-Troubleshooting/2017-10-10-Transition-Replicate-Correlations/")
getwd() #Confirm chagnes
nTransitions <- nrow(SRMDataTargetsReplicateOne) #Number of transitions used
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
dev.off() #Turn off plotting mechanism
}
