boxplot(skokomishRiverData[,i] ~ skokomishRiverData$Eelgrass.Condition, xlab = "Sites", ylab = "", cex.lab = 2, cex.axis = 1.5) #Create the boxplot
title(ylab = "Abundance", line = 2.3, cex.lab = 2) #Add the y-axis label
stripchart(skokomishRiverData[,i] ~ skokomishRiverData$Eelgrass.Condition, vertical = TRUE, method = "jitter", add = TRUE, pch = 20, col = 'blue') #Add each data point
siteANOVA <- aov(skokomishRiverData[,i] ~ skokomishRiverData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between sites
legend("topleft", bty = "n", legend = paste("F =", format(summary(siteANOVA)[[1]][["F value"]][[1]], digits = 4), "p =", format(summary(siteANOVA)[[1]][["Pr(>F)"]][[1]], digits = 4))) #Add F and p-value from ANOVA
title(skokomishRiverFilenames$protein[i])
dev.off() #Close file
}
nPeptides <- (length(willapaBayData)) #The number of columns in the dataframe. The first 2 columns are Site and Eelgrass.Condition
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
fileName <- willapaBayFilenames$siteFilenames[i] #Set the file name choices as the first column
jpeg(filename = fileName, width = 1000, height = 750) #Save using set file name
boxplot(willapaBayData[,i] ~ willapaBayData$Eelgrass.Condition, xlab = "Sites", ylab = "", cex.lab = 2, cex.axis = 1.5) #Create the boxplot
title(ylab = "Abundance", line = 2.3, cex.lab = 2) #Add the y-axis label
stripchart(willapaBayData[,i] ~ willapaBayData$Eelgrass.Condition, vertical = TRUE, method = "jitter", add = TRUE, pch = 20, col = 'blue') #Add each data point
siteANOVA <- aov(willapaBayData[,i] ~ willapaBayData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between sites
legend("topleft", bty = "n", legend = paste("F =", format(summary(siteANOVA)[[1]][["F value"]][[1]], digits = 4), "p =", format(summary(siteANOVA)[[1]][["Pr(>F)"]][[1]], digits = 4))) #Add F and p-value from ANOVA
title(willapaBayFilenames$protein[i])
dev.off() #Close file
}
caseInletANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(caseInletData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(caseInletData)),
"ANOVA.pvalue" = rep(x = 0, times = length(caseInletData)),
"FB-CI" = rep(x = 0, times = length(caseInletData)),
"PG-CI" = rep(x = 0, times = length(caseInletData)),
"SK-CI" = rep(x = 0, times = length(caseInletData)),
"WB-CI" = rep(x = 0, times = length(caseInletData)),
"PG-FB" = rep(x = 0, times = length(caseInletData)),
"SK-FB" = rep(x = 0, times = length(caseInletData)),
"WB-FB" = rep(x = 0, times = length(caseInletData)),
"SK-PG" = rep(x = 0, times = length(caseInletData)),
"WB-PG" = rep(x = 0, times = length(caseInletData)),
"WB-SK" = rep(x = 0, times = length(caseInletData))) #Create a dataframe to hold all results
caseInletANOVATukeyResults <- caseInletANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(caseInletANOVATukeyResults) #Confirm changes
fidalgoBayANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(fidalgoBayData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(fidalgoBayData)),
"ANOVA.pvalue" = rep(x = 0, times = length(fidalgoBayData)),
"FB-CI" = rep(x = 0, times = length(fidalgoBayData)),
"PG-CI" = rep(x = 0, times = length(fidalgoBayData)),
"SK-CI" = rep(x = 0, times = length(fidalgoBayData)),
"WB-CI" = rep(x = 0, times = length(fidalgoBayData)),
"PG-FB" = rep(x = 0, times = length(fidalgoBayData)),
"SK-FB" = rep(x = 0, times = length(fidalgoBayData)),
"WB-FB" = rep(x = 0, times = length(fidalgoBayData)),
"SK-PG" = rep(x = 0, times = length(fidalgoBayData)),
"WB-PG" = rep(x = 0, times = length(fidalgoBayData)),
"WB-SK" = rep(x = 0, times = length(fidalgoBayData))) #Create a dataframe to hold all results
fidalgoBayANOVATukeyResults <- fidalgoBayANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(fidalgoBayANOVATukeyResults) #Confirm changes
portGambleANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(portGambleData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(portGambleData)),
"ANOVA.pvalue" = rep(x = 0, times = length(portGambleData)),
"FB-CI" = rep(x = 0, times = length(portGambleData)),
"PG-CI" = rep(x = 0, times = length(portGambleData)),
"SK-CI" = rep(x = 0, times = length(portGambleData)),
"WB-CI" = rep(x = 0, times = length(portGambleData)),
"PG-FB" = rep(x = 0, times = length(portGambleData)),
"SK-FB" = rep(x = 0, times = length(portGambleData)),
"WB-FB" = rep(x = 0, times = length(portGambleData)),
"SK-PG" = rep(x = 0, times = length(portGambleData)),
"WB-PG" = rep(x = 0, times = length(portGambleData)),
"WB-SK" = rep(x = 0, times = length(portGambleData))) #Create a dataframe to hold all results
portGambleANOVATukeyResults <- portGambleANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(portGambleANOVATukeyResults) #Confirm changes
skokomishRiverANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(skokomishRiverData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(skokomishRiverData)),
"ANOVA.pvalue" = rep(x = 0, times = length(skokomishRiverData)),
"FB-CI" = rep(x = 0, times = length(skokomishRiverData)),
"PG-CI" = rep(x = 0, times = length(skokomishRiverData)),
"SK-CI" = rep(x = 0, times = length(skokomishRiverData)),
"WB-CI" = rep(x = 0, times = length(skokomishRiverData)),
"PG-FB" = rep(x = 0, times = length(skokomishRiverData)),
"SK-FB" = rep(x = 0, times = length(skokomishRiverData)),
"WB-FB" = rep(x = 0, times = length(skokomishRiverData)),
"SK-PG" = rep(x = 0, times = length(skokomishRiverData)),
"WB-PG" = rep(x = 0, times = length(skokomishRiverData)),
"WB-SK" = rep(x = 0, times = length(skokomishRiverData))) #Create a dataframe to hold all results
skokomishRiverANOVATukeyResults <- skokomishRiverANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(skokomishRiverANOVATukeyResults) #Confirm changes
willapaBayANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(willapaBayData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(willapaBayData)),
"ANOVA.pvalue" = rep(x = 0, times = length(willapaBayData)),
"FB-CI" = rep(x = 0, times = length(willapaBayData)),
"PG-CI" = rep(x = 0, times = length(willapaBayData)),
"SK-CI" = rep(x = 0, times = length(willapaBayData)),
"WB-CI" = rep(x = 0, times = length(willapaBayData)),
"PG-FB" = rep(x = 0, times = length(willapaBayData)),
"SK-FB" = rep(x = 0, times = length(willapaBayData)),
"WB-FB" = rep(x = 0, times = length(willapaBayData)),
"SK-PG" = rep(x = 0, times = length(willapaBayData)),
"WB-PG" = rep(x = 0, times = length(willapaBayData)),
"WB-SK" = rep(x = 0, times = length(willapaBayData))) #Create a dataframe to hold all results
willapaBayANOVATukeyResults <- willapaBayANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(willapaBayANOVATukeyResults) #Confirm changes
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
caseInletANOVA <- aov(boxplotData[,i] ~ boxplotData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
caseInletANOVATukeyResults[(i-2), 2] <- summary(caseInletANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
caseInletANOVATukeyResults[(i-2), 3] <- summary(caseInletANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
caseInletTukeyHSD <- TukeyHSD(caseInletANOVA) #Perform Tukey Honest Significant Difference post-hoc test to determine where ANOVA significance is coming from
caseInletANOVATukeyResults[(i-2),4:13] <- caseInletTukeyHSD$`boxplotData$caseInlet`[,4] #Paste Tukey results into table
} #Add all ANOVA and Tukey HSD p-values to the table
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
caseInletANOVA <- aov(caseInletData[,i] ~ caseInletData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
caseInletANOVATukeyResults[(i-2), 2] <- summary(caseInletANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
caseInletANOVATukeyResults[(i-2), 3] <- summary(caseInletANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
caseInletTukeyHSD <- TukeyHSD(caseInletANOVA) #Perform Tukey Honest Significant Difference post-hoc test to determine where ANOVA significance is coming from
caseInletANOVATukeyResults[(i-2),4:13] <- caseInletTukeyHSD$`caseInletData$caseInlet`[,4] #Paste Tukey results into table
} #Add all ANOVA and Tukey HSD p-values to the table
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
caseInletANOVA <- aov(caseInletData[,i] ~ caseInletData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
caseInletANOVATukeyResults[(i-2), 2] <- summary(caseInletANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
caseInletANOVATukeyResults[(i-2), 3] <- summary(caseInletANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
caseInletTukeyHSD <- TukeyHSD(caseInletANOVA) #Perform Tukey Honest Significant Difference post-hoc test to determine where ANOVA significance is coming from
caseInletANOVATukeyResults[(i-2),4:13] <- caseInletTukeyHSD$`caseInletData$Eelgrass.Condition`[,4] #Paste Tukey results into table
} #Add all ANOVA and Tukey HSD p-values to the table
head(caseInletANOVATukeyResults) #Confirm that tests were completed
caseInletANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(caseInletData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(caseInletData)),
"ANOVA.pvalue" = rep(x = 0, times = length(caseInletData))) #Create a dataframe to hold all results
caseInletANOVATukeyResults <- caseInletANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(caseInletANOVATukeyResults) #Confirm changes
fidalgoBayANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(fidalgoBayData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(fidalgoBayData)),
"ANOVA.pvalue" = rep(x = 0, times = length(fidalgoBayData))) #Create a dataframe to hold all results
fidalgoBayANOVATukeyResults <- fidalgoBayANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(fidalgoBayANOVATukeyResults) #Confirm changes
portGambleANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(portGambleData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(portGambleData)),
"ANOVA.pvalue" = rep(x = 0, times = length(portGambleData))) #Create a dataframe to hold all results
portGambleANOVATukeyResults <- portGambleANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(portGambleANOVATukeyResults) #Confirm changes
skokomishRiverANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(skokomishRiverData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(skokomishRiverData)),
"ANOVA.pvalue" = rep(x = 0, times = length(skokomishRiverData))) #Create a dataframe to hold all results
skokomishRiverANOVATukeyResults <- skokomishRiverANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(skokomishRiverANOVATukeyResults) #Confirm changes
willapaBayANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(willapaBayData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(willapaBayData)),
"ANOVA.pvalue" = rep(x = 0, times = length(willapaBayData))) #Create a dataframe to hold all results
willapaBayANOVATukeyResults <- willapaBayANOVATukeyResults[-c(1:2),] #Remove the first two rows, since they are not peptides
head(willapaBayANOVATukeyResults) #Confirm changes
caseInletANOVATukeyResults <- data.frame("Protein.Peptide" = colnames(caseInletData),
"ANOVA.Fstatistic" = rep(x = 0, times = length(caseInletData)),
"ANOVA.pvalue" = rep(x = 0, times = length(caseInletData))) #Create a dataframe to hold all results
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
caseInletANOVA <- aov(caseInletData[,i] ~ caseInletData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
caseInletANOVATukeyResults[(i-2), 2] <- summary(caseInletANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
caseInletANOVATukeyResults[(i-2), 3] <- summary(caseInletANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
} #Add ANOVA F statistics and p-values to the table
head(caseInletANOVATukeyResults) #Confirm that tests were completed
caseInletANOVATukeyResults$ANOVA.adjusted.BH.pvalue <- p.adjust(p = caseInletANOVATukeyResults$ANOVA.pvalue, method = "BH") #Adjust p-values using B-H method and add a column to the table. I can then compare these p-values to my FDR of 0.1.
head(caseInletANOVATukeyResults) #Confirm addition
write.csv(caseInletANOVATukeyResults, "2018-02-15-OneWayANOVA-TukeyHSD-by-Habitat-CaseInlet-pValues.csv") #Wrote out table for future analyses
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
fidalgoBayANOVA <- aov(fidalgoBayData[,i] ~ fidalgoBayData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
fidalgoBayANOVATukeyResults[(i-2), 2] <- summary(fidalgoBayANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
fidalgoBayANOVATukeyResults[(i-2), 3] <- summary(fidalgoBayANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
} #Add ANOVA F statistics and p-values to the table
head(fidalgoBayANOVATukeyResults) #Confirm that tests were completed
fidalgoBayANOVATukeyResults$ANOVA.adjusted.BH.pvalue <- p.adjust(p = fidalgoBayANOVATukeyResults$ANOVA.pvalue, method = "BH") #Adjust p-values using B-H method and add a column to the table. I can then compare these p-values to my FDR of 0.1.
head(fidalgoBayANOVATukeyResults) #Confirm addition
p.adjust(p = fidalgoBayANOVATukeyResults$ANOVA.pvalue, method = "BH")
p.adjust(p = caseInletANOVATukeyResults$ANOVA.pvalue, method = "BH")
p.adjust(p = fidalgoBayANOVATukeyResults$ANOVA.pvalue, method = "BH")
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
fidalgoBayANOVA <- aov(fidalgoBayData[,i] ~ fidalgoBayData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
fidalgoBayANOVATukeyResults[(i-2), 2] <- summary(fidalgoBayANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
fidalgoBayANOVATukeyResults[(i-2), 3] <- summary(fidalgoBayANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
} #Add ANOVA F statistics and p-values to the table
head(fidalgoBayANOVATukeyResults) #Confirm that tests were completed
fidalgoBayANOVATukeyResults$ANOVA.adjusted.BH.pvalue <- p.adjust(p = fidalgoBayANOVATukeyResults$ANOVA.pvalue, method = "BH") #Adjust p-values using B-H method and add a column to the table. I can then compare these p-values to my FDR of 0.1.
head(fidalgoBayANOVATukeyResults) #Confirm addition
write.csv(fidalgoBayANOVATukeyResults, "2018-02-15-OneWayANOVA-TukeyHSD-by-Habitat-FidalgoBay-pValues.csv") #Wrote out table for future analyses
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
portGambleANOVA <- aov(portGambleData[,i] ~ portGambleData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
portGambleANOVATukeyResults[(i-2), 2] <- summary(portGambleANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
portGambleANOVATukeyResults[(i-2), 3] <- summary(portGambleANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
} #Add ANOVA F statistics and p-values to the table
head(portGambleANOVATukeyResults) #Confirm that tests were completed
portGambleANOVATukeyResults$ANOVA.adjusted.BH.pvalue <- p.adjust(p = portGambleANOVATukeyResults$ANOVA.pvalue, method = "BH") #Adjust p-values using B-H method and add a column to the table. I can then compare these p-values to my FDR of 0.1.
head(portGambleANOVATukeyResults) #Confirm addition
write.csv(portGambleANOVATukeyResults, "2018-02-15-OneWayANOVA-TukeyHSD-by-Habitat-PortGamble-pValues.csv") #Wrote out table for future analyses
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
skokomishRiverANOVA <- aov(skokomishRiverData[,i] ~ skokomishRiverData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
skokomishRiverANOVATukeyResults[(i-2), 2] <- summary(skokomishRiverANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
skokomishRiverANOVATukeyResults[(i-2), 3] <- summary(skokomishRiverANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
} #Add ANOVA F statistics and p-values to the table
head(skokomishRiverANOVATukeyResults) #Confirm that tests were completed
skokomishRiverANOVATukeyResults$ANOVA.adjusted.BH.pvalue <- p.adjust(p = skokomishRiverANOVATukeyResults$ANOVA.pvalue, method = "BH") #Adjust p-values using B-H method and add a column to the table. I can then compare these p-values to my FDR of 0.1.
head(skokomishRiverANOVATukeyResults) #Confirm addition
write.csv(skokomishRiverANOVATukeyResults, "2018-02-15-OneWayANOVA-TukeyHSD-by-Habitat-SkokomishRiver-pValues.csv") #Wrote out table for future analyses
for(i in 3:nPeptides) { #For all of my columns with peptide IDs
willapaBayANOVA <- aov(willapaBayData[,i] ~ willapaBayData$Eelgrass.Condition) #Perform an ANOVA to test for significant differences between eelgrass conditions
willapaBayANOVATukeyResults[(i-2), 2] <- summary(willapaBayANOVA)[[1]][["F value"]][[1]] #Paste ANOVA F-statistic in table
willapaBayANOVATukeyResults[(i-2), 3] <- summary(willapaBayANOVA)[[1]][["Pr(>F)"]][[1]] #Paste ANOVA p-value in table
} #Add ANOVA F statistics and p-values to the table
head(willapaBayANOVATukeyResults) #Confirm that tests were completed
willapaBayANOVATukeyResults$ANOVA.adjusted.BH.pvalue <- p.adjust(p = willapaBayANOVATukeyResults$ANOVA.pvalue, method = "BH") #Adjust p-values using B-H method and add a column to the table. I can then compare these p-values to my FDR of 0.1.
head(willapaBayANOVATukeyResults) #Confirm addition
willapaBayANOVATukeyResults
write.csv(willapaBayANOVATukeyResults, "2018-02-15-OneWayANOVA-TukeyHSD-by-Habitat-WillapaBay-pValues.csv") #Wrote out table for future analyses
willapaBayANOVATukeyResults
skokomishRiverANOVATukeyResults
portGambleANOVATukeyResults
fidalgoBayANOVATukeyResults
caseInletANOVATukeyResults
getwd()
setwd("../../..") #Set working directory to the master SRM folder
getwd()
SRMDataNMDSAveragedCorrected <- read.csv("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import modified dataset. This dataset has rownames as the first column, column names as sample IDs. Area data is averaged and corrected (no NAs)
rownames(SRMDataNMDSAveragedCorrected) <- SRMDataNMDSAveragedCorrected[,1]
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveragedCorrected[,-1] #Remove first column of rownames
head(SRMDataNMDSAveragedCorrected) #Confirm import.
SRMDataNMDSAveragedCorrectedTransposed <- data.frame(t(SRMDataNMDSAveragedCorrected)) #Transpose the data
SRMDataNMDSAveragedCorrectedTransposed$Sample.Number <- rownames(SRMDataNMDSAveragedCorrectedTransposed) #Save rownames as a new column
head(SRMDataNMDSAveragedCorrectedTransposed) #Confirm changes
biologicalReplicates <- read.csv("2017-10-10-Troubleshooting/2017-10-24-Coefficient-of-Variation/2017-10-25-Biological-Replicate-Information-SampleID-Only.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
colnames(biologicalReplicates) <- c("Sample.Number", "Site", "Eelgrass.Condition")
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number #Set sample number as row names
head(biologicalReplicates) #Confirm changes
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = SRMDataNMDSAveragedCorrectedTransposed, by = "Sample.Number") #Merge together
head(boxplotData) #Confirm merge
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
plot(boxplotData)
plot(x = boxplotData$Site, y = boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR)
attach(boxplotData)
boxplotData <- boxplotData[order(Site),] #Reorder so sites are sorted alphabetically
head(boxplotData) #Confirm sorting
boxplotData <- boxplot[-2, 0] #Remove habitat information
boxplotData <- boxplot[0, -2] #Remove habitat information
boxplotData <- boxplotData[0, -2] #Remove habitat information
head(boxplotData) #Confirm changes
boxplotData <- merge(x = biologicalReplicates, y = SRMDataNMDSAveragedCorrectedTransposed, by = "Sample.Number") #Merge together
head(boxplotData) #Confirm merge
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
head(boxplotData) #Confirm changes
attach(boxplotData)
MDSAveragedCorrected <- read.csv("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import modified dataset. This dataset has rownames as the first column, column names as sample IDs. Area data is averaged and corrected (no NAs)
rownames(SRMDataNMDSAveragedCorrected) <- SRMDataNMDSAveragedCorrected[,1]
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveragedCorrected[,-1] #Remove first column of rownames
head(SRMDataNMDSAveragedCorrected) #Confirm import.
#### REFORMAT DATA ####
SRMDataNMDSAveragedCorrectedTransposed <- data.frame(t(SRMDataNMDSAveragedCorrected)) #Transpose the data
SRMDataNMDSAveragedCorrectedTransposed$Sample.Number <- rownames(SRMDataNMDSAveragedCorrectedTransposed) #Save rownames as a new column
head(SRMDataNMDSAveragedCorrectedTransposed) #Confirm changes
biologicalReplicates <- read.csv("2017-10-10-Troubleshooting/2017-10-24-Coefficient-of-Variation/2017-10-25-Biological-Replicate-Information-SampleID-Only.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
colnames(biologicalReplicates) <- c("Sample.Number", "Site", "Eelgrass.Condition")
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number #Set sample number as row names
head(biologicalReplicates) #Confirm changes
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = SRMDataNMDSAveragedCorrectedTransposed, by = "Sample.Number") #Merge together
head(boxplotData) #Confirm merge
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
head(boxplotData) #Confirm changes
SRMDataNMDSAveragedCorrected <- read.csv("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import modified dataset. This dataset has rownames as the first column, column names as sample IDs. Area data is averaged and corrected (no NAs)
rownames(SRMDataNMDSAveragedCorrected) <- SRMDataNMDSAveragedCorrected[,1]
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveragedCorrected[,-1] #Remove first column of rownames
head(SRMDataNMDSAveragedCorrected) #Confirm import.
SRMDataNMDSAveragedCorrectedTransposed <- data.frame(t(SRMDataNMDSAveragedCorrected)) #Transpose the data
SRMDataNMDSAveragedCorrectedTransposed$Sample.Number <- rownames(SRMDataNMDSAveragedCorrectedTransposed) #Save rownames as a new column
head(SRMDataNMDSAveragedCorrectedTransposed) #Confirm changes
biologicalReplicates <- read.csv("2017-10-10-Troubleshooting/2017-10-24-Coefficient-of-Variation/2017-10-25-Biological-Replicate-Information-SampleID-Only.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
colnames(biologicalReplicates) <- c("Sample.Number", "Site", "Eelgrass.Condition")
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number #Set sample number as row names
head(biologicalReplicates) #Confirm changes
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = SRMDataNMDSAveragedCorrectedTransposed, by = "Sample.Number") #Merge together
head(boxplotData) #Confirm merge
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
head(boxplotData) #Confirm changes
attach(boxplotData)
boxplotData <- boxplotData[order(Site),] #Reorder so sites are sorted alphabetically
boxplotData <- boxplotData[-2] #Remove habitat information
head(boxplotData) #Confirm changes
SRMDataNMDSAveragedCorrected <- read.csv("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2017-11-05-Averaged-Areas-Pivoted-Corrected.csv", header = TRUE) #Import modified dataset. This dataset has rownames as the first column, column names as sample IDs. Area data is averaged and corrected (no NAs)
rownames(SRMDataNMDSAveragedCorrected) <- SRMDataNMDSAveragedCorrected[,1]
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveragedCorrected[,-1] #Remove first column of rownames
head(SRMDataNMDSAveragedCorrected) #Confirm import.
#### REFORMAT DATA ####
SRMDataNMDSAveragedCorrectedTransposed <- data.frame(t(SRMDataNMDSAveragedCorrected)) #Transpose the data
SRMDataNMDSAveragedCorrectedTransposed$Sample.Number <- rownames(SRMDataNMDSAveragedCorrectedTransposed) #Save rownames as a new column
head(SRMDataNMDSAveragedCorrectedTransposed) #Confirm changes
biologicalReplicates <- read.csv("2017-10-10-Troubleshooting/2017-10-24-Coefficient-of-Variation/2017-10-25-Biological-Replicate-Information-SampleID-Only.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
colnames(biologicalReplicates) <- c("Sample.Number", "Site", "Eelgrass.Condition")
rownames(biologicalReplicates) <- biologicalReplicates$Sample.Number #Set sample number as row names
head(biologicalReplicates) #Confirm changes
biologicalReplicates$Site <- factor(biologicalReplicates$Site) #Remove 0 as a factor
biologicalReplicates$Eelgrass.Condition <- factor(biologicalReplicates$Eelgrass.Condition) #Remove 0 as a factor
str(biologicalReplicates) #Confirm factor reset
boxplotData <- merge(x = biologicalReplicates, y = SRMDataNMDSAveragedCorrectedTransposed, by = "Sample.Number") #Merge together
head(boxplotData) #Confirm merge
rownames(boxplotData) <- boxplotData$Sample.Number #Set sample number as row names
boxplotData <- boxplotData[-1] #Remove Sample.Number column
head(boxplotData) #Confirm changes
attach(boxplotData)
boxplotData <- boxplotData[order(Site),] #Reorder so sites are sorted alphabetically
detach(boxplotData)
boxplotData <- boxplotData[-2] #Remove habitat information
head(boxplotData) #Confirm changes
plot(boxplotData)
plot(x = boxplotData$Site, y = boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR)
plot(x = boxplotData$Site, y = boxplotData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR)
caseInletData <- subset(x = boxplotData, subset = boxplotData$Site == "CI") #Subset Case Inlet data
fidalgoBayData <- subset(x = boxplotData, subset = boxplotData$Site == "FB") #Subset Fidalgo Bay data
portGambleData <- subset(x = boxplotData, subset = boxplotData$Site == "PG") #Subset Port Gamble Bay data
skokomishRiverData <- subset(x = boxplotData, subset = boxplotData$Site == "SK") #Subset Skokomish River Delta data
willapaBayData <- subset(x = boxplotData, subset = boxplotData$Site == "WB") #Subset Willapa Bay data
mean(caseInletData)
rownames(caseInletData) <- caseInletData$Site
caseInletData
caseInletData <- caseInletData[-1]
caseInletData
fidalgoBayData <- fidalgoBayData[-1] #Remove site classification
portGambleData <- portGambleData[-1] #Remove site classification
skokomishRiverData <- skokomishRiverData[-1] #Remove site classification
willapaBayData <- willapaBayData[-1] #Remove site classification
mean(caseInletData)
mean(caseInletData, na.rm = TRUE)
caseInletData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR
mean(caseInletData$CHOYP_ACAA2.1.1.m.30666.ELGLNNDITNMNGGAIALGHPLAASGTR)
caseInletData
colnames(caseInletData)
peptideNames <- colnames(caseInletData)
length(peptideNames)
caseInletAverages[1] <- mean(caseInletData[,1])
caseInletAverages <- rep(0, times = length(peptideNames)) #Create an empty vector to store data
caseInletAverages[1] <- mean(caseInletData[,1])
for(i in 1:length(peptideNames)) {
caseInletAverages[i] <- mean(caseInletData[,i])
} #Average each column and save it in the caseInletAverages vector
caseInletAverages <- data.frame("peptide" = peptideNames,
"site" = rep("CI", times = length(peptideNames)),
"averageNormalizedAbundance" = caseInletAverages) #Create a new dataframe with peptide names, site, and average normalized protein abundances
head(caseInletAverages) #Confirm dataframe creation
fidalgoBayAverages <- rep(0, times = length(peptideNames)) #Create an empty vector to store data
for(i in 1:length(peptideNames)) {
fidalgoBayAverages[i] <- mean(fidalgoBayData[,i])
} #Average each column and save it in the fidalgoBayAverages vector
fidalgoBayAverages <- data.frame("peptide" = peptideNames,
"site" = rep("CI", times = length(peptideNames)),
"averageNormalizedAbundance" = fidalgoBayAverages) #Create a new dataframe with peptide names, site, and average normalized protein abundances
head(fidalgoBayAverages) #Confirm dataframe creation
fidalgoBayAverages <- rep(0, times = length(peptideNames)) #Create an empty vector to store data
for(i in 1:length(peptideNames)) {
fidalgoBayAverages[i] <- mean(fidalgoBayData[,i])
} #Average each column and save it in the fidalgoBayAverages vector
fidalgoBayAverages <- data.frame("peptide" = peptideNames,
"site" = rep("FB", times = length(peptideNames)),
"averageNormalizedAbundance" = fidalgoBayAverages) #Create a new dataframe with peptide names, site, and average normalized protein abundances
head(fidalgoBayAverages) #Confirm dataframe creation
portGambleAverages <- rep(0, times = length(peptideNames)) #Create an empty vector to store data
for(i in 1:length(peptideNames)) {
portGambleAverages[i] <- mean(portGambleData[,i])
} #Average each column and save it in the portGambleAverages vector
portGambleAverages <- data.frame("peptide" = peptideNames,
"site" = rep("PG", times = length(peptideNames)),
"averageNormalizedAbundance" = portGambleAverages) #Create a new dataframe with peptide names, site, and average normalized protein abundances
head(portGambleAverages) #Confirm dataframe creation
skokomishRiverAverages <- rep(0, times = length(peptideNames)) #Create an empty vector to store data
for(i in 1:length(peptideNames)) {
skokomishRiverAverages[i] <- mean(skokomishRiverData[,i])
} #Average each column and save it in the skokomishRiverAverages vector
skokomishRiverAverages <- data.frame("peptide" = peptideNames,
"site" = rep("SK", times = length(peptideNames)),
"averageNormalizedAbundance" = skokomishRiverAverages) #Create a new dataframe with peptide names, site, and average normalized protein abundances
head(skokomishRiverAverages) #Confirm dataframe creation
willapaBayAverages <- rep(0, times = length(peptideNames)) #Create an empty vector to store data
for(i in 1:length(peptideNames)) {
willapaBayAverages[i] <- mean(willapaBayData[,i])
} #Average each column and save it in the willapaBayAverages vector
willapaBayAverages <- data.frame("peptide" = peptideNames,
"site" = rep("WB", times = length(peptideNames)),
"averageNormalizedAbundance" = willapaBayAverages) #Create a new dataframe with peptide names, site, and average normalized protein abundances
head(willapaBayAverages) #Confirm dataframe creation
rbind(willapaBayAverages, skokomishRiverAverages)
averagePeptideData <- rbind(caseInletAverages, fidalgoBayAverages, portGambleAverages, skokomishRiverAverages, willapaBayAverages) #Merge all averaged peptide data into a single dataframe
write.csv(averagePeptideData, "2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/2018-02-16-Average-Peptide-Data-by-Site.csv") #Wrote out table for future analyses
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance)
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance)
plot(averagePeptideData)
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/test.jpeg", height = 1000, width = 1000)
plot(x = averagePeptideData, y = averagePeptideData$averageNormalizedAbundance)
dev.off()
dev.off()
dev.off()
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance)
?plot
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance, type = p)
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance, type = "p")
p
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance, type = "p")
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance, type = "p")
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance, type = "o")
plot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance, type = "l")
dotplot(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance)
dotchart(x = averagePeptideData$site, y = averagePeptideData$averageNormalizedAbundance)
dotchart(x = averagePeptideData)
dotchart(x = averagePeptideData$averageNormalizedAbundance)
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site)
?dotchart
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, color = "blue")
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, bg = "blue")
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site)
peptideNames
averagePeptideData$shapes <- c(1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 3, 1, 2, 0) #1 = circle, 2 = triangle, 0 = square
head(averagePeptideData) #Confirm addition
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pt.cex = averagePeptideData$shapes)
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes)
averagePeptideData$shapes <- c(1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0) #Specify shapes. 1 = circle, 2 = triangle, 0 = square
head(averagePeptideData) #Confirm addition
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes)
averagePeptideData$shapes <- c(16, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0) #Specify shapes. 1 = circle, 2 = triangle, 0 = square
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes)
averagePeptideData$shapes <- c(16, 2, 0, 16, 2, 16, 2, 0, 16, 2, 16, 2, 0, 16, 2, 0, 16, 16, 2, 16, 2, 16, 2, 16, 2, 0, 16, 2, 16, 2, 0, 16, 2, 0, 16, 2, 0) #Specify shapes. 1 = circle, 2 = triangle, 0 = square
averagePeptideData$shapes <- c(16, 17, 0, 16, 17, 16, 17, 0, 16, 17, 16, 17, 0, 16, 17, 0, 16, 16, 17, 16, 17, 16, 17, 16, 17, 0, 16, 17, 16, 17, 0, 16, 17, 0, 16, 17, 0) #Specify shapes. 1 = circle, 2 = triangle, 0 = square
averagePeptideData$shapes <- c(16, 17, 15, 16, 17, 16, 17, 15, 16, 17, 16, 17, 15, 16, 17, 15, 16, 16, 17, 16, 17, 16, 17, 16, 17, 15, 16, 17, 16, 17, 15, 16, 17, 15, 16, 17, 15) #Specify shapes. 16 = circle, 17 = triangle, 15 = square
head(averagePeptideData) #Confirm addition
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes)
c(rep("goldenrod1", times = 3), rep("turquoise1", times = 2), rep("deepskyblue1", times = 3), rep("seagreen1", times = 2), rep("purple1", times = 3), rep("dodgerblue1", times = 3), rep("dodgerblue3", times = 1), rep("sandybrown", times = 2), rep("orangered", times = 2), rep("palegreen3", times = 2), rep("chocolate4", times = 3), rep("violet", times = 3), rep("olivedrab2", times = 3), rep("lawngreen", times = 3), rep("springgreen4", times = 3))
averagePeptideData$colors <- c(rep("goldenrod1", times = 3), rep("turquoise1", times = 2), rep("deepskyblue1", times = 3), rep("seagreen1", times = 2), rep("purple1", times = 3), rep("dodgerblue1", times = 3), rep("dodgerblue3", times = 1), rep("sandybrown", times = 2), rep("orangered", times = 2), rep("palegreen3", times = 2), rep("chocolate4", times = 3), rep("violet", times = 3), rep("olivedrab2", times = 3), rep("lawngreen", times = 3), rep("springgreen4", times = 3))
colors <- c(rep("goldenrod1", times = 3), rep("turquoise1", times = 2), rep("deepskyblue1", times = 3), rep("seagreen1", times = 2), rep("purple1", times = 3), rep("dodgerblue1", times = 3), rep("dodgerblue3", times = 1), rep("sandybrown", times = 2), rep("orangered", times = 2), rep("palegreen3", times = 2), rep("chocolate4", times = 3), rep("violet", times = 3), rep("olivedrab2", times = 3), rep("lawngreen", times = 3), rep("springgreen4", times = 3))
colors <- c(rep("goldenrod1", times = 3), rep("turquoise1", times = 2), rep("deepskyblue1", times = 3), rep("seagreen1", times = 2), rep("purple1", times = 3), rep("dodgerblue1", times = 3), rep("dodgerblue3", times = 1), rep("sandybrown", times = 2), rep("orangered", times = 2), rep("palegreen3", times = 2), rep("chocolate4", times = 3), rep("violet", times = 2), rep("olivedrab2", times = 3), rep("lawngreen", times = 3), rep("springgreen4", times = 3))
averagePeptideData$colors <- c(rep("goldenrod1", times = 3), rep("turquoise1", times = 2), rep("deepskyblue1", times = 3), rep("seagreen1", times = 2), rep("purple1", times = 3), rep("dodgerblue1", times = 3), rep("dodgerblue3", times = 1), rep("sandybrown", times = 2), rep("orangered", times = 2), rep("palegreen3", times = 2), rep("chocolate4", times = 3), rep("violet", times = 2), rep("olivedrab2", times = 3), rep("lawngreen", times = 3), rep("springgreen4", times = 3))
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors)
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, bg = "black")
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, bg = "white")
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white")
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites")
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 5)
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 5, cex.lab = 3)
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/All-Peptide-Abundances-Across-Sites.jpeg")
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/All-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000)
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 5, cex.lab = 3) #Create plot with all peptide abundance data
dev.off() #Turn off plotting device
dev.off() #Turn off plotting device
dev.off() #Turn off plotting device
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 4, cex.lab = 2.5) #Create plot with all peptide abundance data
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 4, cex.lab = 2) #Create plot with all peptide abundance data
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 4, cex.lab = 1.5) #Create plot with all peptide abundance data
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with all peptide abundance data
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/All-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with all peptide abundance data
dev.off() #Turn off plotting device
diffExpPeptides <- peptideNames[, c(4, 6:10, 14:15, 18:19, 22, 24, 26)] #Copy differentially expressed peptides into a new vector
diffExpPeptides <- peptideNames[c(4, 6:10, 14:15, 18:19, 22, 24, 26)] #Copy differentially expressed peptides into a new vector
diffExpPeptides
diffExpPeptides$temp <- rep(0, times = length(diffExpPeptides)) #Add a temporary column
diffExpPeptides <- peptideNames[c(4, 6:10, 14:15, 18:19, 22, 24, 26)] #Copy differentially expressed peptides into a new vector
head(averagePeptideData) #Confirm addition
diffExpPeptides <- data.frame("peptide" = diffExpPeptides,
"temp" = rep(0, times = length(diffExpPeptides)) #Add a temporary column and make diffExpPepties a dataframe
head(diffExpPeptides)
diffExpPeptides <- data.frame("peptide" = diffExpPeptides,
"temp" = rep(0, times = length(diffExpPeptides))) #Add a temporary column and make diffExpPepties a dataframe
head(diffExpPeptides)
diffExpPeptides <- merge(x = diffExpPeptides, y = averagePeptideData, by = "peptide")
head(diffExpPeptides)
diffExpPeptides <- diffExpPeptides[,-2] #Remove "temp" column
head(diffExpPeptides) #Confirm merge and column removal
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5, lcolor = "white") #Create plot with differentially expressed peptide abundance data
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-18-DNR-Paper-Figure/Differentially-Expressed-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
dev.off() #Turn off plotting device
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-18-DNR-Paper-Figure/Differentially-Expressed-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
dev.off() #Turn off plotting device
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-18-DNR-Paper-Figure/2018-02-18-Differentially-Expressed-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
dev.off() #Turn off plotting device
diffExpPeptides
View(averagePeptideData)
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, lcolor = "white", main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with all peptide abundance data
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with all peptide abundance data
View(diffExpPeptides)
attach(diffExpPeptides)
head(diffExpPeptides) #Confirm merge and column removal
diffExpPeptides <- diffExpPeptides[order(site),] #Reorder so sites are sorted alphabetically
detach(diffExpPeptides)
attach(diffExpPeptides)
diffExpPeptides <- diffExpPeptides[order(site),] #Reorder so sites are sorted alphabetically
detach(diffExpPeptides)
head(diffExpPeptides) #Confirm sort
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/2018-02-16-All-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = averagePeptideData$averageNormalizedAbundance, groups = averagePeptideData$site, pch = averagePeptideData$shapes, color = averagePeptideData$colors, main = "Peptide Abundances Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with all peptide abundance data
dev.off() #Turn off plotting device
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-18-DNR-Paper-Figure/2018-02-18-Differentially-Expressed-Peptide-Abundances-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
dev.off() #Turn off plotting device
dev.off() #Turn off plotting device
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/2018-02-18-Differentially-Expressed-Peptides-Across-Sites.jpeg" height = 1000, width = 1000) #Save file
jpeg("2017-10-10-Troubleshooting/2017-11-05-Integrated-Dataset/2018-02-15-DNR-Paper-Figure/2018-02-18-Differentially-Expressed-Peptides-Across-Sites.jpeg", height = 1000, width = 1000) #Save file
dotchart(x = diffExpPeptides$averageNormalizedAbundance, groups = diffExpPeptides$site, pch = diffExpPeptides$shapes, color = diffExpPeptides$colors, main = "Differentially Expressed Peptides Across Sites", xlab = "Normalized Peptide Abundance", ylab = "Sites", cex.main = 3, cex.lab = 1.5) #Create plot with differentially expressed peptide abundance data
dev.off() #Turn off plotting device
