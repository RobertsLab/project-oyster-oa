SRMDataTargetsOnlyPivoted <- dcast(SRMDataTargetsOnly, Protein.Name + Peptide.Sequence + Fragment.Ion ~ Sample.Number) #Cast table! Protein/Peptides/Transitions remain as columns with Sample Number as column headers. Normalized.Area used as value column by default.
head(SRMDataTargetsOnlyPivoted) #Confirm cast.
SRMDataTargetsOnlyPivoted$RowNames <- paste(SRMDataTargetsOnlyPivoted$Protein.Name, SRMDataTargetsOnlyPivoted$Peptide.Sequence, SRMDataTargetsOnlyPivoted$Fragment.Ion) #Merge Protein, Peptide and Transition information into one column
head(SRMDataTargetsOnlyPivoted) #Confirm column merge
SRMDataTargetsOnlyPivoted <- SRMDataTargetsOnlyPivoted[,-c(1:3)] #Remove unmerged columns
head(SRMDataTargetsOnlyPivoted) #Confirm column removal
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivoted #Duplicate dataframe
SRMDataTargetsOnlyPivotedCorrected[is.na(SRMDataTargetsOnlyPivotedCorrected)] <- 0 #Replace NAs with 0s
head(SRMDataTargetsOnlyPivotedCorrected) #Confirm there are no NAs
rownames(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected$RowNames #Set RowNames column as dataframe rownames
SRMDataTargetsOnlyPivotedCorrected <- subset(SRMDataTargetsOnlyPivotedCorrected, select = -c(RowNames)) #Remove RowNames column
head(SRMDataTargetsOnlyPivotedCorrected) #Confirm changes
SRMDataTargetsReplicateOne <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 1, to = (length(SRMDataTargetsOnlyPivotedCorrected) - 1), by = 2))] #Subset all odd columns (first replicate)
colnames(SRMDataTargetsReplicateOne) #Confirm subset
SRMDataTargetsReplicateTwo <- SRMDataTargetsOnlyPivotedCorrected[, c(seq(from = 2, to = length(SRMDataTargetsOnlyPivotedCorrected), by = 2))] #Subset all even columns (first replicate)
colnames(SRMDataTargetsReplicateTwo) #Confirm subset
SRMDataTransposedReplicateOne <- t(SRMDataTargetsReplicateOne) #Transpose Replicate 1 dataframe
head(SRMDataTransposedReplicateOne) #Confirm transposition
SRMDataTransposedReplicateTwo <- t(SRMDataTargetsReplicateTwo) #Transpose Replicate 2 dataframe
head(SRMDataTransposedReplicateTwo) #Confirm transposition
View(SRMDataTransposedReplicateOne)
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep(".jpeg", 111)) #Make a dataframe of filenames
correlationFilenames$full <- paste(correlationFilenames$filenames, "confint" correlationFilenames$modifier) #Merge the two columns together in a third column. This column has the full filename that will be used
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep("confint.jpeg", 111)) #Make a dataframe of filenames
correlationFilenames$full <- paste(correlationFilenames$filenames, correlationFilenames$modifier) #Merge the two columns together in a third column. This column has the full filename that will be used
head(correlationFilenames) #Confirm changes
setwd(dir = "2017-10-10-Troubleshooting/2017-10-24-Confidence-Interval-Transitions/") #Change working directory so files are saved in the same directory as the R script
getwd() #Confirm changes
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep("confint.jpeg", 111)) #Make a dataframe of filenames
correlationFilenames$full <- paste(correlationFilenames$filenames, correlationFilenames$modifier) #Merge the two columns together in a third column. This column has the full filename that will be used
head(correlationFilenames) #Confirm changes
abline(a = 0, b = 1) #Plot x = y line
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
transitionModel <- lm(SRMDataTransposedReplicateTwo[,1] ~ SRMDataTransposedReplicateOne[,1]) #Predict Replicate 2 from Replicate 1
plot(x= SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
abline(a = 0, b = 1) #Plot x = y line
abline(a = 0, b = 1, col = "blue") #Plot x = y line
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
confidenceIntervalLine <- abline(a = 0, b = 1, col = "blue") #Plot x = y line
confint(confidenceIntervalLine, level = 0.95)
elkData <- read.csv("Lab2Data2.csv") #import data
transitionModel$xlevels
min(transitionModel$xlevels)
transitionModel$coefficients
transitionModel$model
transitionModel$SRMDataTranspostedReplicateOne[,]
transitionModel$SRMDataTranspostedReplicateOne[,1]
x <- seq(from = min(SRMDataTransposedReplicateOne[,1]), to = max(SRMDataTransposedReplicateOne[,1]), by = 1) #Create a sequence for all possible x values
y.fitted <- 0 + 1*x #Forumla for prediction line defines fitted values
length(SRMDataTransposedReplicateOne)
length(SRMDataTransposedReplicateOne[,1])
ssx <- sum((SRMDataTransposedReplicateOne[,1] - mean(SRMDataTransposedReplicateOne[,1]))^2)
confidenceIntervalData <- data.frame(x = c(1:7000),
y = c(1:7000))
confidenceIntervalModel <- lm(confidenceIntervalData$y ~ confidenceIntervalModel$x) #Use x values to predict y values in model
confidenceIntervalModel <- lm(confidenceIntervalData$y ~ confidenceIntervalModel$x) #Use x values to predict y values in model
confidenceIntervalModel <- lm(confidenceIntervalData$y ~ confidenceIntervalData$x) #Use x values to predict y values in model
abline(confidenceIntervalModel)
summary(confidenceIntervalModel)
summary(confidenceIntervalModel)$1
summary(confidenceIntervalModel)[1]
summary(confidenceIntervalModel)[4]
summary(confidenceIntervalModel)[5]
summary(confidenceIntervalModel)[6]
mse <- (summary(confidenceIntervalModel)$sigma)^2 #Calculate MSE using residual standard error from model summary statistics
ssx <- sum((confidenceIntervalData$x - mean(confidenceIntervalData$x))^2) #Calculate the sum of squares for x values
getwd()
setwd(dir = "..") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "...") #Set the working directory to the folder with all SRM analysis files.
setwd(dir = "../..") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "./..") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "../..") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "2017-10-10-Troubleshooting/2017-10-24-Confidence-Interval-Transitions/") #Change working directory so files are saved in the same directory as the R script
setwd(dir = "/Users/yaaminivenkataraman/Documents/project-oyster-oa/analyses/DNR_SRM_20170902/") #Set the working directory to the folder with all SRM analysis files.
setwd(dir = "..") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "/Users/yaaminivenkataraman/Documents/project-oyster-oa/analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-10-24-Confidence-Interval-Transitions/") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "..") #Set the working directory to the folder with all SRM analysis files.
getwd()
setwd(dir = "/Users/yaaminivenkataraman/Documents/project-oyster-oa/analyses/DNR_SRM_20170902/2017-10-10-Troubleshooting/2017-10-24-Confidence-Interval-Transitions/") #Set the working directory to the folder with all SRM analysis files.
setwd(dir = "../..") #Set the working directory to the folder with all SRM analysis files.
getwd()
getwd()
setwd(dir = "2017-10-10-Troubleshooting/2017-10-24-Confidence-Interval-Transitions/") #Change working directory so files are saved in the same directory as the R script
getwd() #Confirm changes
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep("confint.jpeg", 111)) #Make a dataframe of filenames
setwd(dir = "../..") #Set the working directory to the folder with all SRM analysis files (project-oyster-oa/analyses/DNR_SRM_20170902)
getwd()
setwd(dir = "2017-10-10-Troubleshooting/2017-10-24-Confidence-Interval-Transitions/") #Change working directory so files are saved in the same directory as the R script
getwd() #Confirm changes
x <- seq(from = min(confidenceIntervalData$x), to = max(confidenceIntervalData$x), by = 1) #Create a sequence of x for all possible x values
y.fitted <-
summary(confidenceIntervalModel)
summary(confidenceIntervalModel)
summary(confidenceIntervalModel)$coeff[1]
summary(confidenceIntervalModel)$coeff[2]
y.upper <- y.fitted + sqrt(2*qf(0.95, 2, 44))*sqrt(mse*(1/12 + (x - mean(confidenceIntervalData$x))^2/ssx)) #Formula for upper confidence bound. Generate critical value from F distribution, where alpha = 0.95, numerator df = 2 (estimating intercept and slope), residual standard error df = 44 (46 samples - 2).
y.fitted <- summary(confidenceIntervalModel)$coeff[1] + summary(confidenceIntervalModel)$coeff[2]*x #Formula for prediction line
y.upper <- y.fitted + sqrt(2*qf(0.95, 2, 44))*sqrt(mse*(1/12 + (x - mean(confidenceIntervalData$x))^2/ssx)) #Formula for upper confidence bound. Generate critical value from F distribution, where alpha = 0.95, numerator df = 2 (estimating intercept and slope), residual standard error df = 44 (46 samples - 2).
y.lower <- y.fitted - sqrt(2*qf(0.95, 2, 44))*sqrt(mse*(1/12 + (x - mean(confidenceIntervalData$x))^2/ssx)) #Lower confidence bound
transitionModel <- lm(SRMDataTransposedReplicateTwo[,1] ~ SRMDataTransposedReplicateOne[,1]) #Predict Replicate 2 from Replicate 1
plot(x= SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
abline(confidenceIntervalModel, col = "blue") #Plot prediction line
lines(lowess(x, y.upper), lty = 3, col = "blue") #Add upper confidence line. Lowess process creates a smooth curve.
lines(lowess(x, y.lower), lty = 3, col = "blue") #Add lower confidence line
y.lower
confit(confidenceIntervalModel, level = 0.95)
confint(confidenceIntervalModel, level = 0.95)
correlationFilenames <- data.frame(filenames = colnames(SRMDataTransposedReplicateOne),
modifier = rep("confint.jpeg", 111)) #Make a dataframe of filenames
correlationFilenames$full <- paste(correlationFilenames$filenames, correlationFilenames$modifier) #Merge the two columns together in a third column. This column has the full filename that will be used
head(correlationFilenames) #Confirm changes
nTransitions <- nrow(SRMDataTargetsReplicateOne) #Number of transitions used
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
abline(a = 0, b = 1) #Plot x = y line
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
dev.off() #Turn off plotting mechanism
}
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = c(paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))), paste = "slope", format(summary(transitionModel$coefficients[1], digits = 4))) #Plot R-squared value and slope
dev.off() #Turn off plotting mechanism
}
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
legend("bottomright", bty = "n", legend = paste("slope =", format(summary(transitionModel)$coefficients[1], digits=4))) #Plot slope
dev.off() #Turn off plotting mechanism
}
(summary(transitionModel)$coefficients[2]
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
legend("bottomright", bty = "n", legend = paste("slope =", format(summary(transitionModel)$coefficients[2], digits=4))) #Plot slope
dev.off() #Turn off plotting mechanism
}
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
legend("bottomright", bty = "n", legend = paste("slope =", format(summary(transitionModel)$coefficients[2], digits=4))) #Plot slope
dev.off() #Turn off plotting mechanism
}
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "blue")
legend("bottomright", bty = "n", legend = paste("regression slope =", format(summary(transitionModel)$coefficients[2], digits=4))) #Plot slope
dev.off() #Turn off plotting mechanism
}
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "blue")
legend("bottomright", bty = "n", legend = paste("fitted line =", summary(transitionModel)$coeff[1] + summary(transitionModel)$coeff[2], "*x")) #Plot slope
dev.off() #Turn off plotting mechanism
}
plot(x= SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "blue")
legend("bottomright", bty = "n", legend = paste("fitted line =", format(summary(transitionModel)$coeff[1], digits = 4), "+", format(summary(transitionModel)$coeff[2], digits = 4), "*x")) #Add fitted line
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "blue")
legend("bottomright", bty = "n", legend = paste("fitted line =", format(summary(transitionModel)$coeff[1], digits = 4), "+", format(summary(transitionModel)$coeff[2], digits = 4), "*x"))
dev.off() #Turn off plotting mechanism
}
SRMDataTargetsOnlyPivotedCorrected
write.csv(x = SRMDataTargetsOnlyPivotedCorrected, file = "2017-10-24-Targets-Replicates-Adjacent-Columns.csv") #Write out dataframe for future use
abline(summary(transitionModel)$coeff[1] + SRMDataTransposedReplicateOne[,1])
line(summary(transitionModel)$coeff[1] + SRMDataTransposedReplicateOne[,1])
plot(line(summary(transitionModel)$coeff[1] + SRMDataTransposedReplicateOne[,1]))
lines(summary(transitionModel)$coeff[1] + SRMDataTransposedReplicateOne[,1]))
lines(lowess(SRMDataTransposedReplicateOne[,1], (summary(transitionModel)$coeff[1] + SRMDataTransposedReplicateOne[,1])))
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "black")
legend("bottomright", bty = "n", legend = paste("fitted line =", format(summary(transitionModel)$coeff[1], digits = 4), "+", format(summary(transitionModel)$coeff[2], digits = 4), "*x"))
lines(lowess(SRMDataTransposedReplicateOne[,1], (summary(transitionModel)$coeff[1] + SRMDataTransposedReplicateOne[,1])))
y.slope <- summary(confidenceIntervalModel)$coeff[1] + SRMDataTransposedReplicateOne[,1] #Formula for prediction line
x <- SRMDataTransposedReplicateOne[,1]
lines(lowess(x, y.slope), col = "blue")
lines(x = x, y = y.slope)
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
text(x = SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
plot(x= SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[1], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,1], y = SRMDataTransposedReplicateTwo[,1], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "black")
legend("bottomright", bty = "n", legend = paste("fitted line =", format(summary(transitionModel)$coeff[1], digits = 4), "+", format(summary(transitionModel)$coeff[2], digits = 4), "*x"))
lines(x = x, y = y.slope)
x.slope <- seq(min(SRMDataTransposedReplicateOne[,1]), max(SRMDataTransposedReplicateOne[,1]), by = 1)
transitionModel <- lm(SRMDataTransposedReplicateTwo[,1] ~ SRMDataTransposedReplicateOne[,1]) #Predict Replicate 2 from Replicate 1
y.slope <- summary(transitionModel)$coeff[1] + 1*x.slope #Formula for prediction line, taking the intercept from the regression line and setting the slope to 1
lines(lowess(x.slope, y.slope))
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red", lty = 3) #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "black", lty = 3)
legend("bottomright", bty = "n", legend = paste("regression line =", format(summary(transitionModel)$coeff[1], digits = 4), "+", format(summary(transitionModel)$coeff[2], digits = 4), "*x"))
x.slope <- seq(min(SRMDataTransposedReplicateOne[,i]), max(SRMDataTransposedReplicateOne[,i]), by = 1)
y.slope <- summary(transitionModel)$coeff[1] + 1*x.slope #Formula for prediction line, taking the intercept from the regression line and setting the slope to 1
lines(lowess(x.slope, y.slope), col = "blue")
dev.off() #Turn off plotting mechanism
}
for(i in 1:nTransitions) { #For all transitions
transitionModel <- lm(SRMDataTransposedReplicateTwo[,i] ~ SRMDataTransposedReplicateOne[,i]) #Predict Replicate 2 from Replicate 1
fileName <- correlationFilenames$full[i] #Set filename choice as the ith entry
jpeg(filename = fileName, width = 1000, height = 1000) #Save .jpeg using set filename
plot(x= SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], xlab = "Replicate 1 Area", ylab = "Replicate 2 Area", main = correlationFilenames$filename[i], type = "n") #Create plot, but do not plot points
text(x = SRMDataTransposedReplicateOne[,i], y = SRMDataTransposedReplicateTwo[,i], labels = rownames(SRMDataTransposedReplicateOne), cex = 0.7) #Plot sample ID instead of points
abline(transitionModel, col = "red") #Plot regression
legend("topleft", bty = "n", legend = paste("R2 =", format(summary(transitionModel)$adj.r.squared, digits=4))) #Plot R-squared value
abline(a = 0, b  = 1, col = "black", lty = 3)
legend("bottomright", bty = "n", legend = paste("regression line =", format(summary(transitionModel)$coeff[1], digits = 4), "+", format(summary(transitionModel)$coeff[2], digits = 4), "*x"))
x.slope <- seq(min(SRMDataTransposedReplicateOne[,i]), max(SRMDataTransposedReplicateOne[,i]), by = 1) #Create a sequence of x values
y.slope <- summary(transitionModel)$coeff[1] + 1*x.slope #Formula for prediction line, taking the intercept from the regression line and setting the slope to 1
lines(lowess(x.slope, y.slope), col = "blue")
dev.off() #Turn off plotting mechanism
}
SRMDataTargetsOnlyPivotedCorrected <-  read.csv("2017-10-24-Targets-Replicates-Adjacent-Columns.csv")
SRMDataTargetsOnlyPivotedCorrected
SRMDataTargetsOnlyPivotedCorrected <-  read.csv("2017-10-24-Targets-Replicates-Adjacent-Columns.csv", header = TRUE, row.names = SRMDataTargetsOnlyPivotedCorrected[1,] )
SRMDataTargetsOnlyPivotedCorrected <-  read.csv("2017-10-24-Targets-Replicates-Adjacent-Columns.csv", header = TRUE)
head(SRMDataTargetsOnlyPivotedCorrected)
row.names(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected[1,]
rownames(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected[1,]
rownames(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected$X
head(SRMDataTargetsOnlyPivotedCorrected)
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivotedCorrected[,-1] #Remove column X
head(SRMDataTargetsOnlyPivotedCorrected)
setwd(dir = "../..") #Set the working directory to the folder with all SRM analysis files (project-oyster-oa/analyses/DNR_SRM_20170902)
getwd()
SRMDataTargetsOnlyPivotedCorrected <-  read.csv("2017-10-10-Troubleshooting/2017-10-10-Transition-Replicate-Correlations/2017-10-24-Targets-Replicates-Adjacent-Columns.csv", header = TRUE) #Import dataframe
rownames(SRMDataTargetsOnlyPivotedCorrected) <- SRMDataTargetsOnlyPivotedCorrected$X #Set rownames as first column
SRMDataTargetsOnlyPivotedCorrected <- SRMDataTargetsOnlyPivotedCorrected[,-1] #Remove column X
head(SRMDataTargetsOnlyPivotedCorrected)
normalizedData <- read.csv("2017-09-11-SRM-Data-Normalized-NMDS-Pivoted.csv") #Normalized data
head(normalizedData)
normalizedData <- normalizedData[,-1] #Remove extra column
head(normalizedData)
SRMData <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = #N/A)
SRMData <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = #N/A)
head(SRMData)
head(SRMData)
SRMData <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "#N/A")
head(SRMData)
View(SRMData)
SRMData <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "#N/A")
head(SRMData)
nonnormalizedData <- SRMData
nonnormalizedData <- nonnormalizedData[,-c(1, 3, 6, 8, 10, 11, 12)] #Remove unnecessary columns
head(nonnormalizedData) #Confirm changes
nonnormalizedData$Protein.Peptide.Transition <- paste(nonnormalizedData$Protein.Name, nonnormalizedData$Peptide.Sequence, nonnormalizedData$Fragment.Ion) #Create new column for full name
head(nonnormalizedData)
nonnormalizedData <- nonnormalizedData[,-c(2:4)] #Remove individual columns
head(nonnormalizedData)
nonnormalizedData <- SRMData #Save as a new dataframe for nonnormalized data
nonnormalizedData <- nonnormalizedData[,-c(1, 3, 6, 8, 10, 11, 12)] #Remove unnecessary columns
head(nonnormalizedData) #Confirm changes
nonnormalizedData$Protein.Peptide.Transition <- paste(nonnormalizedData$Protein.Name, nonnormalizedData$Peptide.Sequence, nonnormalizedData$Fragment.Ion) #Create new column for full name
nonnormalizedData <- nonnormalizedData[! nonnormalizedData$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data
head(nonnormalizedData) #Confirm removal
nonnormalizedData$Protein.Peptide.Transition <- paste(nonnormalizedData$Protein.Name, nonnormalizedData$Peptide.Sequence, nonnormalizedData$Fragment.Ion) #Create new column for full name
nonnormalizedData <- nonnormalizedData[,-c(2:4)] #Remove individual columns
head(nonnormalizedData) #Confirm changes
transform(nonnormalizedData, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(nonnormalizedData$Area) #Confirm change
transform(nonnormalizedData, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(nonnormalizedData$Area) #Confirm change
SRMData <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "#N/A") #Import data
nonnormalizedData <- SRMData #Save as a new dataframe for nonnormalized data
nonnormalizedData <- nonnormalizedData[,-c(1, 3, 6, 8, 10, 11, 12)] #Remove unnecessary columns
head(nonnormalizedData) #Confirm changes
nonnormalizedData <- nonnormalizedData[! nonnormalizedData$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data
transform(nonnormalizedData, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(nonnormalizedData$Area) #Confirm change
SRMData <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "#N/A") #Import data
nonnormalizedData <- SRMData #Save as a new dataframe for nonnormalized data
nonnormalizedData <- nonnormalizedData[,-c(1, 3, 6, 8, 10, 11, 12)] #Remove unnecessary columns
head(nonnormalizedData) #Confirm changes
nonnormalizedData <- nonnormalizedData[! nonnormalizedData$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data
nonnormalizedData$Protein.Peptide.Transition <- paste(nonnormalizedData$Protein.Name, nonnormalizedData$Peptide.Sequence, nonnormalizedData$Fragment.Ion) #Create new column for full name
nonnormalizedData <- nonnormalizedData[,-c(2:4)] #Remove individual columns
is.numeric(nonnormalizedData$Area) #Confirm change
transform(nonnormalizedData, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(nonnormalizedData$Area) #Confirm change
head(nonnormalizedData) #Confirm changes
View(nonnormalizedData)
nonnormalizedData <- read.csv("2017-09-07-SRM-Data-NMDS-Pivoted.csv", header = TRUE, rownames = TRUE)
nonnormalizedData <- read.csv("2017-09-07-SRM-Data-NMDS-Pivoted.csv", header = TRUE, row.names = TRUE)
nonnormalizedData <- read.csv("2017-09-07-SRM-Data-NMDS-Pivoted.csv", header = TRUE)
head(nonnormalizedData)
nonnormalizedData <- -nonnormalizedData$X
nonnormalizedData <- read.csv("2017-09-07-SRM-Data-NMDS-Pivoted.csv", header = TRUE)
head(nonnormalizedData)
nonnormalizedData <- nonnormalizedData[,-1]
head(nonnormalizedData)
?rbind
sampleIDs <- c("O01", "O04", "O06", "O08", "010", "O100", "O101", "O102", "O103", "O106", "O118", "O121", "O122", "O124", "O128", "O131", "O137", "O14", "O140", "O145", "O147", "O17", "O21", "O22", "O24", "O26", "O30", "O31", "O32", "O35", "O40", "O43", "O46", "O49", "O51", "O52", "O56", "O60", "O64", "O66", "O71", "O78", "O90", "O91", "O96", "O99")
length(sampleIDs)
"sampleIDs[1]"
sampleIDs[1]
head(nonnormalizedData) #Confirm changes
?rep
length(nonnormalizedData$RowNames)
temp <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[1], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,1],
"Replicate 2" = nonnormalizedData[,2]) #Subset the row names and two technical replicates
View(temp)
temp2 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[2], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,3],
"Replicate 2" = nonnormalizedData[,4]) #Subset the row names and two technical replicates
View(temp2)
technicalReplicatesSampleIDs <- rbind(temp, temp2)
technicalReplicatesSampleIDs
nSamples <- length(sampleIDs)
temp3 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[3], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,5],
"Replicate 2" = nonnormalizedData[,6]) #Subset the row names and two technical replicates
technicalReplicatesSampleIDsNonNormalized[1:111,] <- data.frame("Protein.Name" = nonnormalizedData[,93], "Sample" = rep(x = sampleIDs[3], times = length(nonnormalizedData$RowNames)), "Replicate 1" = nonnormalizedData[,5], "Replicate 2" = nonnormalizedData[,6]) #Subset the row names and two technical replicates
technicalReplicatesSampleIDsNonNormalized[1:111,] <- temp3
technicalReplicatesSampleIDsNonNormalized
technicalReplicatesSampleIDsNonNormalized <- rbind(temp, temp2)
technicalReplicatesSampleIDsNonNormalized[1:111,] <- data.frame("Protein.Name" = nonnormalizedData[,93], "Sample" = rep(x = sampleIDs[3], times = length(nonnormalizedData$RowNames)), "Replicate 1" = nonnormalizedData[,5], "Replicate 2" = nonnormalizedData[,6]) #Subset the row names and two technical replicates
technicalReplicatesSampleIDsNonNormalized[1:111,] <- temp3
View(technicalReplicatesSampleIDsNonNormalized)
View(technicalReplicatesSampleIDsNonNormalized)
temp <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[1], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,1],
"Replicate 2" = nonnormalizedData[,2]) #Subset the row names and two technical replicates
temp2 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[2], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,3],
"Replicate 2" = nonnormalizedData[,4]) #Subset the row names and two technical replicates
technicalReplicatesSampleIDsNonNormalized <- rbind(temp, temp2)
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized[1:111,] <- temp3
technicalReplicatesSampleIDsNonNormalized[1:111, 1:4] <- temp3
technicalReplicatesSampleIDsNonNormalized[1,] <- temp3[1,]
levels(temp3)
View(temp3)
View(temp3)
technicalReplicatesSampleIDsNonNormalized <- rep(x = 0, times = 111)
technicalReplicatesSampleIDsNonNormalized <- rep(x = 0, times = 46*111)
technicalReplicatesSampleIDsNonNormalized[1:111,] <- temp3
technicalReplicatesSampleIDsNonNormalized <- data.frame("Protein.Name" = rep(x = 0, times = 46*111), "Sample" = rep(x = 0, times = 46*111), "Replicate1" = rep(x = 0, times = 46*111), "Replicate2" = rep(x = 0, times = 46*111))
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized[1:111,] <- temp3
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1:111,] <- temp3$Protein.Name
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1] <- temp3$Protein.Name
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1] <- temp3$Protein.Name[1]
View(technicalReplicatesSampleIDsNonNormalized)
View(technicalReplicatesSampleIDs)
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized <- data.frame("Protein.Name" = rep(x = 0, times = 46*111), "Sample" = rep(x = 0, times = 46*111), "Replicate1" = rep(x = 0, times = 46*111), "Replicate2" = rep(x = 0, times = 46*111))
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1] <- temp3$Protein.Name[1]
View(technicalReplicatesSampleIDsNonNormalized)
View(temp3)
temp3$Protein.Name[1]
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1] == temp3$Protein.Name[1]
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1] = temp3$Protein.Name[1]
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1] <- temp3$Protein.Name[1]
technicalReplicatesSampleIDsNonNormalized$Protein.Name[1:111] <- temp3$Protein.Name
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized[1:111,] <-data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[1], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,1],
"Replicate 2" = nonnormalizedData[,2])
View(technicalReplicatesSampleIDsNonNormalized)
for(i in 1:nSamples) {
technicalReplicatesSampleIDsNonNormalized[i:111*i] <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[i], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,((2*i)-1)],
"Replicate 2" = nonnormalizedData[,2*i])
}
temp7 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[7], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,13],
"Replicate 2" = nonnormalizedData[,14]) #Subset the row names and two technical replicates
temp7 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[7], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,13],
"Replicate 2" = nonnormalizedData[,14]) #Subset the row names and two technical replicates
temp7 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[7], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,13],
"Replicate 2" = nonnormalizedData[,14]) #Subset the row names and two technical replicates
temp7 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[7], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,13],
"Replicate 2" = nonnormalizedData[,14]) #Subset the row names and two technical replicates
temp7 <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[7], times = length(nonnormalizedData$RowNames)),
"Replicate 1" = nonnormalizedData[,13],
"Replicate 2" = nonnormalizedData[,14]) #Subset the row names and two technical replicates
technicalReplicatesSampleIDsNonNormalized <- data.frame("Protein.Name" = rep(x = 0, times = 10), "Sample" = rep(x = 0, times = 10), "Replicate1" = rep(x = 0, times = 10), "Replicate2" = rep(x = 0, times = 10))
technicalReplicatesSampleIDsNonNormalized <- rbind(technicalReplicatesSampleIDsNonNormalized, temp)
temp <- data.frame("Protein.Name" = nonnormalizedData[,93],
"Sample" = rep(x = sampleIDs[1], times = length(nonnormalizedData$RowNames)),
"Replicate1" = nonnormalizedData[,1],
"Replicate2" = nonnormalizedData[,2]) #Subset the row names and two technical replicates
technicalReplicatesSampleIDsNonNormalized <- rbind(technicalReplicatesSampleIDsNonNormalized, temp)
View(technicalReplicatesSampleIDsNonNormalized)
nonnormalizedData <- read.csv("2017-09-07-SRM-Data-NMDS-Pivoted.csv", header = TRUE) #Import pivoted nonnormalized data
nonnormalizedData <- nonnormalizedData[,-1] #Remove irrelevant first column
head(nonnormalizedData) #Confirm changes
sampleIDs <- c("O01", "O04", "O06", "O08", "010", "O100", "O101", "O102", "O103", "O106", "O118", "O121", "O122", "O124", "O128", "O131", "O137", "O14", "O140", "O145", "O147", "O17", "O21", "O22", "O24", "O26", "O30", "O31", "O32", "O35", "O40", "O43", "O46", "O49", "O51", "O52", "O56", "O60", "O64", "O66", "O71", "O78", "O90", "O91", "O96", "O99")
technicalReplicatesSampleIDsNonNormalized <- data.frame("Protein.Name" = rep(x = 0, times = 10), "Sample" = rep(x = 0, times = 10), "Replicate1" = rep(x = 0, times = 10), "Replicate2" = rep(x = 0, times = 10))
nSamples <- length(sampleIDs) #Count the number of sample IDs
for(i in 1:nSamples) {
temp <- data.frame("Protein.Name" = nonnormalizedData[,93], #First column is protein name
"Sample" = rep(x = sampleIDs[i], times = length(nonnormalizedData$RowNames)), #Second column is the sample ID
"Replicate1" = nonnormalizedData[,((2*i)-1)], #Third column is the area data from the first technical replicate
"Replicate2" = nonnormalizedData[,2*i]) #Fourth column is the area data from the second technical replicate
technicalReplicatesSampleIDsNonNormalized <- rbind(technicalReplicatesSampleIDsNonNormalized, temp)
}
View(technicalReplicatesSampleIDsNonNormalized)
technicalReplicatesSampleIDsNonNormalized <- technicalReplicatesSampleIDsNonNormalized[-c(1:10),] #Remove empty first ten rows
head(technicalReplicatesSampleIDsNonNormalized)
levels(technicalReplicatesSampleIDsNonNormalized)
levels(technicalReplicatesSampleIDsNonNormalized$Sample)
View(technicalReplicatesSampleIDsNonNormalized)
write.csv(x = technicalReplicatesSampleIDsNonNormalized, file = "2017-10-24-NonNormalized-Adjacent-Technical-Replicates")
normalizedData <- read.csv("2017-09-11-SRM-Data-Normalized-NMDS-Pivoted.csv", header = TRUE) #Import pivoted nonnormalized data
normalizedData <- normalizedData[,-1] #Remove irrelevant first column
head(normalizedData) #Confirm changes
technicalReplicatesSampleIDsNormalized <- data.frame("Protein.Name" = rep(x = 0, times = 10), "Sample" = rep(x = 0, times = 10), "Replicate1" = rep(x = 0, times = 10), "Replicate2" = rep(x = 0, times = 10))
nSamples <- length(sampleIDs) #Count the number of sample IDs
for(i in 1:nSamples) {
temp <- data.frame("Protein.Name" = normalizedData[,93], #First column is protein name
"Sample" = rep(x = sampleIDs[i], times = length(normalizedData$RowNames)), #Second column is the sample ID
"Replicate1" = normalizedData[,((2*i)-1)], #Third column is the area data from the first technical replicate
"Replicate2" = normalizedData[,2*i]) #Fourth column is the area data from the second technical replicate
technicalReplicatesSampleIDsNormalized <- rbind(technicalReplicatesSampleIDsNormalized, temp)
}
technicalReplicatesSampleIDsNormalized <- technicalReplicatesSampleIDsNormalized[-c(1:10),] #Remove empty first ten rows
head(technicalReplicatesSampleIDsNormalized) #Confirm changes
write.csv(x = technicalReplicatesSampleIDsNormalized, file = "2017-10-24-Normalized-Adjacent-Technical-Replicates")
