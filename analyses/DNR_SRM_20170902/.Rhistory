Distance = sampleDistances[seq(from = 1, to = nSamples, by = 2)]) #Create a new dataframe with just odd numbered row distances (technical replicate pairs)
head(technicalReplicateDistances) #Confirm dataframe creation
tail(technicalReplicateDistances) #Confirm dataframe creation
plot(x = technicalReplicateDistances$Sample, y = technicalReplicateDistances$Distance, type = "line", xlab = "Sample", ylab = "Distance between Ordinations")
head(SRMDataNMDSPivotedCorrected) #Dataset I'll use to average technical replicates, from my first R script (NMDS for Technical Replication)
SRMDataNMDSAveraged <- data.frame(x = rep(x = 0, times = 111),
y = rep(x = 0, times = 111)) #Create an empty dataframe to store averaged values
row.names(SRMDataNMDSAveraged) <- SRMDataNMDSPivotedCorrected$RowNames #Add row names
head(SRMDataNMDSAveraged) #Confirm changes
for(i in 1:(length(SRMDataNMDSPivotedCorrected)-1)) { #Average normalized area values for consecutive columns
SRMDataNMDSAveraged[,i] <- (SRMDataNMDSPivotedCorrected[,i]+SRMDataNMDSPivotedCorrected[,i+1])/2
}
head(SRMDataNMDSAveraged) #Confirm averaging
for(i in 1:(length(SRMDataNMDSPivotedCorrected))) { #Average normalized area values for consecutive columns
SRMDataNMDSAveraged[,i] <- (SRMDataNMDSPivotedCorrected[,i]+SRMDataNMDSPivotedCorrected[,i+1])/2
}
head(SRMDataNMDSAveraged) #Confirm averaging
SRMDataNMDSAveraged <- SRMDataNMDSAveraged[seq(from = 1, to = (length(SRMDataNMDSPivotedCorrected)-1), by = 2)] #Remove even-numbered columns, since those consecutive columns are not technical replicates
head(SRMDataNMDSAveraged) #Confirm column removal
colnames(SRMDataNMDSAveraged) <- technicalReplicates[seq(from = 1, to = (length(SRMDataNMDSPivotedCorrected)-1), by = 2)] #Add column names
colnames(SRMDataNMDSAveraged) #Confirm column naming
head(SRMDataNMDSAveraged) #Confirm column naming
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveraged #Duplicate dataframe
SRMDataNMDSAveragedCorrected[is.na(SRMDataNMDSAveragedCorrected)] <- 0 #Replace NAs with 0s
head(SRMDataNMDSAveragedCorrected) #Confirm there are no NAs
area.protID4 <- SRMDataNMDSAveragedCorrected #Save all area data as a new dataframe
head(area.protID4) #Confirm changes
area4.t <- t(area.protID4) #Transpose the file so that rows and columns are switched
head(area4.t) #Confirm transposition
area4.tra <- (area4.t+1) #Add 1 to all values before transforming
area4.tra <- data.trans(area4.tra, method = 'log', plot = FALSE) #log(x+1) transformation
proc.nmds.averaged.euclidean <- metaMDS(area4.t, distance = 'euclidean', k = 2, trymax = 10000, autotransform = FALSE) #Make MDS dissimilarity matrix using euclidean distance. Julian confirmed that I should use euclidean distances, and not bray-curtis
stressplot(proc.nmds.averaged.euclidean) #Make Shepard plot
ordiplot(proc.nmds.averaged.euclidean, choices = c(1,2), type = "points", display = "sites") #Plot basic NMDS
temporaryData <- data.frame(Sample.Number = technicalReplicates,
y = rep(x = 0, times = length(technicalReplicates))) #Create a temporary dataframe with technical replicate names used in NMDS
head(temporaryData) #Confirm dataframe creation
NMDSColorShapeCustomization <- merge(x = temporaryData, y = biologicalReplicates, by = "Sample.Number") #Merge biological information with samples used
head(NMDSColorShapeCustomization) #Confirm merge
tail(NMDSColorShapeCustomization) #Confirm merge
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[-c(97:98),-2] #Remove OBLNK2 and empty column
tail(NMDSColorShapeCustomization) #Confirm removal
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[seq(from = 1, to = 95, by = 2),] #Keep only every other row
head(NMDSColorShapeCustomization) #Confirm changes
NMDSColorShapeCustomization$Sample.Number #Confirm changes
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Colors <- c(rep(x = "red", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "blue", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "black", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "green", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "magenta", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
NMDS.Colors <- c(rep(x = "red", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "blue", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "black", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "green", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "magenta", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Colors <- c(rep(x = "red", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "blue", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "black", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "green", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "magenta", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
NMDSColorShapeCustomization[,4] <- NMDS.Colors #Add the color vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Eelgrass.Condition),] #Reorder so eelgrass condition is sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Shapes <- c(rep(x = 16, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Bare")),
rep(x = 17, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Eelgrass"))) #Make a shape vector
dissimArea4.t <- vegdist(area4.t, "euclidean") #Calculate dissimilarity matrix
ANOSIMReplicates <- biologicalReplicates[c(1:49),] #Subset sample numbers used as IDs in ANOSIM
row.names(ANOSIMReplicates) <- ANOSIMReplicates[,1] #Assign sample numbers as row names
ANOSIMReplicates <- ANOSIMReplicates[,-1] #Remove Sample.Number column
head(ANOSIMReplicates) #Confirm changes
str(ANOSIMReplicates) #Examine structure
ANOSIMReplicates$Site <- factor(ANOSIMReplicates$Site) #Make sure only preesnt factors are recognized
ANOSIMReplicates$Eelgrass.Condition <- factor(ANOSIMReplicates$Eelgrass.Condition) #Make sure only preesnt factors are recognized
str(ANOSIMReplicates) #Confirm structure
siteANOSIM <- anosim(dat = dissimArea4.t, grouping = ANOSIMReplicates[,1]) #One-way ANOSIM by Site
summary(siteANOSIM)
plot(siteANOSIM)
eelgrassANOSIM <- anosim(dat = dissimArea4.t, grouping = ANOSIMReplicates[,2]) #One-way ANOSIM by Eelgrass presence
summary(eelgrassANOSIM)
proc.nmds.euclidean <- metaMDS(area2.t, distance = 'euclidean', k = 2, trymax = 10000, autotransform = FALSE) #Make MDS dissimilarity matrix using euclidean distance. Julian confirmed that I should use euclidean distances, and not bray-curtis
ordiplot(proc.nmds.euclidean, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
proc.nmds.euclidean.log <- metaMDS(area2.tra, distance = 'euclidean', k = 2, trymax = 10000, autotransform = FALSE) #Make MDS dissimilarity matrix using euclidean distance
ordiplot(proc.nmds.euclidean.log, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
proc.nmds.euclidean.autotransform <- metaMDS(area2.t, distance = 'euclidean', k = 2, trymax = 10000, autotransform = TRUE) #Make MDS dissimilarity matrix using euclidean distance and autotransformation
ordiplot(proc.nmds.euclidean.autotransform, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
proc.nmds.euclidean.autotransform <- metaMDS(area2.t, distance = 'euclidean', k = 2, trymax = 10000, autotransform = TRUE) #Make MDS dissimilarity matrix using euclidean distance and autotransformation
ordiplot(proc.nmds.euclidean.autotransform, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
ordiplot(proc.nmds.euclidean.log, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
ordiplot(proc.nmds.euclidean.log, choices = c(1,2), type = "text", display = "sites", cex = 0.2) #Plot refined NMDS displaying only samples with their names
ordiplot(proc.nmds.euclidean.log, choices = c(1,2), type = "text", display = "sites", cex = 0.3) #Plot refined NMDS displaying only samples with their names
head(SRMDataNMDSPivotedCorrected) #Dataset I'll use to average technical replicates, from my first R script (NMDS for Technical Replication)
SRMDataNMDSAveraged <- data.frame(x = rep(x = 0, times = 111),
y = rep(x = 0, times = 111)) #Create an empty dataframe to store averaged values
row.names(SRMDataNMDSAveraged) <- SRMDataNMDSPivotedCorrected$RowNames #Add row names
head(SRMDataNMDSAveraged) #Confirm changes
for(i in 1:(length(SRMDataNMDSPivotedCorrected))) { #Average normalized area values for consecutive columns
SRMDataNMDSAveraged[,i] <- (SRMDataNMDSPivotedCorrected[,i]+SRMDataNMDSPivotedCorrected[,i+1])/2
}
head(SRMDataNMDSAveraged) #Confirm averaging
SRMDataNMDSAveraged <- SRMDataNMDSAveraged[seq(from = 1, to = (length(SRMDataNMDSPivotedCorrected)-1), by = 2)] #Remove even-numbered columns, since those consecutive columns are not technical replicates
head(SRMDataNMDSAveraged) #Confirm column removal
colnames(SRMDataNMDSAveraged) <- technicalReplicates[seq(from = 1, to = (length(SRMDataNMDSPivotedCorrected)-1), by = 2)] #Add column names
colnames(SRMDataNMDSAveraged) #Confirm column naming
head(SRMDataNMDSAveraged) #Confirm column naming
SRMDataNMDSAveragedCorrected <- SRMDataNMDSAveraged #Duplicate dataframe
SRMDataNMDSAveragedCorrected[is.na(SRMDataNMDSAveragedCorrected)] <- 0 #Replace NAs with 0s
head(SRMDataNMDSAveragedCorrected) #Confirm there are no NAs
area.protID4 <- SRMDataNMDSAveragedCorrected #Save all area data as a new dataframe
head(area.protID4) #Confirm changes
area4.t <- t(area.protID4) #Transpose the file so that rows and columns are switched
head(area4.t) #Confirm transposition
area4.tra <- (area4.t+1) #Add 1 to all values before transforming
area4.tra <- data.trans(area4.tra, method = 'log', plot = FALSE) #log(x+1) transformation
proc.nmds.averaged.euclidean <- metaMDS(area4.t, distance = 'euclidean', k = 2, trymax = 10000, autotransform = FALSE) #Make MDS dissimilarity matrix using euclidean distance. Julian confirmed that I should use euclidean distances, and not bray-curtis
stressplot(proc.nmds.averaged.euclidean) #Make Shepard plot
vec.proc.nmds.averaged.euclidean <- envfit(proc.nmds.averaged.euclidean$points, area4.t, perm = 1000) #Calculate loadings
ordiplot(proc.nmds.averaged.euclidean, choices = c(1,2), type = "points", display = "sites") #Plot basic NMDS
plot(vec.proc.nmds.averaged.euclidean, p.max=.01, col='blue') #Plot eigenvectors
temporaryData <- data.frame(Sample.Number = technicalReplicates,
y = rep(x = 0, times = length(technicalReplicates))) #Create a temporary dataframe with technical replicate names used in NMDS
head(temporaryData) #Confirm dataframe creation
NMDSColorShapeCustomization <- merge(x = temporaryData, y = biologicalReplicates, by = "Sample.Number") #Merge biological information with samples used
head(NMDSColorShapeCustomization) #Confirm merge
tail(NMDSColorShapeCustomization) #Confirm merge
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[,-2] #Remove empty column
tail(NMDSColorShapeCustomization) #Confirm removal
head(NMDSColorShapeCustomization) #Confirm removal
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[seq(from = 1, to = 91, by = 2),] #Keep only every other row
head(NMDSColorShapeCustomization) #Confirm changes
NMDSColorShapeCustomization$Sample.Number #Confirm changes
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Site),] #Reorder so sites are sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Colors <- c(rep(x = "red", times = sum(NMDSColorShapeCustomization$Site == "CI")),
rep(x = "blue", times = sum(NMDSColorShapeCustomization$Site == "FB")),
rep(x = "black", times = sum(NMDSColorShapeCustomization$Site == "PG")),
rep(x = "green", times = sum(NMDSColorShapeCustomization$Site == "SK")),
rep(x = "magenta", times = sum(NMDSColorShapeCustomization$Site == "WB"))) #Create a color vector
NMDSColorShapeCustomization[,4] <- NMDS.Colors #Add the color vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Eelgrass.Condition),] #Reorder so eelgrass condition is sorted alphabetically
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
NMDS.Shapes <- c(rep(x = 16, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Bare")),
rep(x = 17, times = sum(NMDSColorShapeCustomization$Eelgrass.Condition == "Eelgrass"))) #Make a shape vector
NMDSColorShapeCustomization[,5] <- NMDS.Shapes #Add the shape vector to the dataframe
head(NMDSColorShapeCustomization) #Confirm addition
attach(NMDSColorShapeCustomization)
NMDSColorShapeCustomization <- NMDSColorShapeCustomization[order(Sample.Number),] #Resort by sample number
head(NMDSColorShapeCustomization) #Confirm sorting
detach(NMDSColorShapeCustomization)
colnames(NMDSColorShapeCustomization) <- c("Sample.Number", "Site", "Eelgrass.Condition", "Color", "Shape") #Change column names
head(NMDSColorShapeCustomization) #Confirm change
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type='none', display='sites', xlab='Axis 1', ylab='Axis 2', cex=0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
legend("bottomleft", pch = c(rep(x = 16, times = 6), 17), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('red', 'blue', 'black', 'green', 'magenta', 'black', 'black'))
dissimArea4.t <- vegdist(area4.t, "euclidean") #Calculate dissimilarity matrix
write.csv(x = masterSRMDataBiologicalReplicates, file = "2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv") #Write out master dataframe
write.csv(SRMDataNMDSNonNormalizedPivoted, file = "2017-09-07-SRM-Data-NMDS-Pivoted.csv") #Wrote out as .csv to make future analyses easier.
jpeg(filename = "2017-09-11-NMDS-TechnicalReplication-NonNormalized.jpeg", width = 1000, height = 1000)
ordiplot(proc.nmds.nonnorm.euclidean, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
dev.off()
write.csv(SRMDataNMDSPivoted, file = "2017-09-11-SRM-Data-Normalized-NMDS-Pivoted.csv") #Wrote out as .csv to make future analyses easier.
jpeg(filename = "2017-09-08-NMDS-TechnicalReplication-Normalized.jpeg", width = 1000, height = 1000)
ordiplot(proc.nmds.euclidean, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
dev.off()
jpeg(filename = "2017-09-08-NMDS-TechnicalReplication-Ordination-Distances.jpeg", width = 1000, height = 1000)
plot(x = technicalReplicateDistances$Sample, y = technicalReplicateDistances$Distance, type = "line", xlab = "Sample", ylab = "Distance between Ordinations")
dev.off()
jpeg(filename = "2017-09-11-NMDS-Analysis-Averaged", width = 1000, height = 1000)
fig.nmds <- ordiplot(proc.nmds.averaged.euclidean, choices=c(1,2), type='none', display='sites', xlab='Axis 1', ylab='Axis 2', cex=0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = NMDSColorShapeCustomization$Color, pch = NMDSColorShapeCustomization$Shape)
legend("bottomleft", pch = c(rep(x = 16, times = 6), 17), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('red', 'blue', 'black', 'green', 'magenta', 'black', 'black'))
dev.off()
SRMDataNMDSAveragedCorrected
View(SRMDataNMDSAveragedCorrected)
?barchart
?histogram
barplot(SRMDataNMDSAveragedCorrected)
barplot(VADeaths, legend=TRUE, ylab="Death rate")
VADeaths
barplot(SRMDataNMDSAveragedCorrected)
barplot(SRMDataNMDSAveragedCorrected$`O01-1`)
?reshape2
?dcast
?melt
melt(SRMDataNMDSAveragedCorrected)
SRMDataBarplots <- SRMDataNMDSAveragedCorrected
SRMDataBarplots[,47] <- rownames(SRMDataBarplots)
head(SRMDataBarplots) #Confirm changes
SRMDataBarplotsMelt <- melt(SRMDataBarplots, id.vars = V47, colnames(SRMDataBarplots))
SRMDataBarplotsMelt <- melt(SRMDataBarplots, id = c("V47", colnames(SRMDataBarplots)))
SRMDataBarplotsMelt
View(SRMDataBarplotsMelt)
SRMDataBarplots <- masterSRMDataBiologicalReplicates #Duplicate dataframe
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(2, 5, 7)] #Remove extraneous columns
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC) #Normalize area
head(SRMDataBarplots)
SRMDataBarplots$Protein.Peptide.Transition <- paste(SRMDataBarplots$Protein.Name, SRMDataBarplots$Peptide.Sequence, SRMDataBarplots$Fragment.Ion)
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(2:5)] #Remove extraneous columns
head(SRMDataBarplots)
SRMDataBarplots <- masterSRMDataBiologicalReplicates #Duplicate dataframe
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(2, 5, 7)] #Remove extraneous columns
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC) #Normalize area
SRMDataBarplots$Protein.Peptide.Transition <- paste(SRMDataBarplots$Protein.Name, SRMDataBarplots$Peptide.Sequence, SRMDataBarplots$Fragment.Ion) #Combine protein IDs
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(3:5)] #Remove extraneous columns, but keep protein name
head(SRMDataBarplots)
attach(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[order(Protein.Name),] #Reorder by protein name
head(SRMDataBarplots)
detach(SRMDataBarplots)
CaseInletBarplot <- SRMDataBarplots$Site == "CI"
CaseInletBarplot
?subset
CaseInletBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "CI")
CaseInletBarplot
FidalgoBayBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "FB")
PortGambleBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "PG")
SkokomishRiverBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "SK")
WillapaBayBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "WB")
attach(CaseInletBarplots)
attach(CaseInletBarplot)
CaseInletBarplot <- CaseInletBarplot[order(Protein.Name),] #Reorder by protein name
detach(CaseInletBarplot)
head(CaseInletBarplot)
CaseInletBarplot <- CaseInletBarplot[order(Protein.Peptide.Transition),] #Reorder by protein name
attach(CaseInletBarplot)
CaseInletBarplot <- CaseInletBarplot[order(Protein.Peptide.Transition),] #Reorder by protein name
detach(CaseInletBarplot)
head(CaseInletBarplot)
View(CaseInletBarplot)
View(CaseInletBarplot)
average(CaseInletBarplot$Normalized.Area[1:92])
mean(CaseInletBarplot$Normalized.Area[1:92])
caseCatalase <- subset(CaseInletBarplots, CaseInletBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
caseCatalase <- subset(CaseInletBarplot, CaseInletBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
fidalgoCatalase <- subset(FidalgoBayBarplot, FidalgoBayBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
portCatalase <- subset(PortGambleBarplot, PortGambleBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
willapaCatalase <- subset(WillapaBarplot, WillapaBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
willapaCatalase <- subset(WillapaBayBarplot, WillapaBayBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
catalaseAreas <- rbind(caseCatalase, fidalgoCatalase, portCatalase, skokomishCatalase, willapaCatalase)
catalaseAreas <- rbind(caseCatalase, fidalgoCatalase, portCatalase, skokomishCatalase, willapaCatalase)
skokomishCatalase <- subset(SkokomishRiverBarplot, SkokomishRiverBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
catalaseAreas <- rbind(caseCatalase, fidalgoCatalase, portCatalase, skokomishCatalase, willapaCatalase)
catalaseAreas
View(catalaseAreas)
View(catalaseAreas)
caseCatalaseP1T1 <- mean(caseCatalase$Normalized.Area[1:92]) #Average catalase values
View(caseCatalase)
unique(caseCatalase$Protein.Peptide.Transition)
caseCatalaseP1T2 <- mean(caseCatalase$Normalized.Area[93:92*2])
caseCatalaseP1T2 <- mean(caseCatalase$Normalized.Area[93:(92*2)])
caseCatalaseP1T3 <- mean(caseCatalase$Normalized.Area[((92*2)+1):(92*3)])
caseCatalaseP2T1 <- mean(caseCatalase$Normalized.Area[((92*3)+1):(92*4)])
caseCatalaseP2T2 <- mean(caseCatalase$Normalized.Area[((92*4)+1):(92*5)])
caseCatalaseP2T3 <- mean(caseCatalase$Normalized.Area[((92*5)+1):(92*6)])
caseCatalaseP3T1 <- mean(caseCatalase$Normalized.Area[((92*6)+1):(92*7)])
caseCatalaseP3T2 <- mean(caseCatalase$Normalized.Area[((92*7)+1):(92*8)])
92*2
((92*2)+1)
(92*3)
(92*4)
(92*5)
(92*6)
((92*6)+1)
(92*7)
(92*8)
((92*8)+1)
(92*9)
caseCatalaseP1T2 <- mean(caseCatalase$Normalized.Area[93:184]
caseCatalaseP1T3 <- mean(caseCatalase$Normalized.Area[185:276]
caseCatalaseP2T1 <- mean(caseCatalase$Normalized.Area[277:368]
caseCatalaseP2T2 <- mean(caseCatalase$Normalized.Area[369:460]
caseCatalaseP2T3 <- mean(caseCatalase$Normalized.Area[461:552]
caseCatalaseP3T1 <- mean(caseCatalase$Normalized.Area[553:644]
caseCatalaseP3T2 <- mean(caseCatalase$Normalized.Area[645:736]
caseCatalaseP3T3 <- mean(caseCatalase$Normalized.Area[737:828]
92*2
catalaseAreas <- rbind(caseCatalase, fidalgoCatalase, portCatalase, skokomishCatalase, willapaCatalase)
catalaseAreas
caseCatalaseP1T2 <- mean(caseCatalase$Normalized.Area[93:184])
caseCatalaseP1T3 <- mean(caseCatalase$Normalized.Area[185:276])
caseCatalaseP2T1 <- mean(caseCatalase$Normalized.Area[277:368])
caseCatalaseP2T2 <- mean(caseCatalase$Normalized.Area[369:460])
caseCatalaseP2T3 <- mean(caseCatalase$Normalized.Area[461:552])
caseCatalaseP3T1 <- mean(caseCatalase$Normalized.Area[553:644])
caseCatalaseP3T2 <- mean(caseCatalase$Normalized.Area[645:736])
caseCatalaseP3T3 <- mean(caseCatalase$Normalized.Area[737:828])
caseCatalaseP1T1 <- mean(caseCatalase$Normalized.Area[1:18]) #Average catalase values
caseCatalaseP1T2 <- mean(caseCatalase$Normalized.Area[19:36])
18*3
caseCatalaseP1T3 <- mean(caseCatalase$Normalized.Area[37:54])
18*4
18*5
caseCatalaseP2T2 <- mean(caseCatalase$Normalized.Area[73:90])
18*6
18*7
18*8
caseCatalaseP3T2 <- mean(caseCatalase$Normalized.Area[127:144])
18*9
caseCatalaseP3T3 <- mean(caseCatalase$Normalized.Area[145:162])
View(catalaseAreas)
fidalgoCatalaseP1T1 <- mean(fidalgoCatalase$Normalized.Area[1:18])
fidalgoCatalaseP1T2 <- mean(fidalgoCatalase$Normalized.Area[19:36])
fidalgoCatalaseP1T3 <- mean(fidalgoCatalase$Normalized.Area[37:54])
portCatalaseP1T1 <- mean(portCatalase$Normalized.Area[1:18])
portCatalaseP1T2 <- mean(portCatalase$Normalized.Area[19:36])
portCatalaseP1T3 <- mean(portCatalase$Normalized.Area[37:54])
skokomishCatalaseP1T1 <- mean(skokomishCatalase$Normalized.Area[1:18])
skokomishCatalaseP1T2 <- mean(skokomishCatalase$Normalized.Area[19:36])
skokomishCatalaseP1T3 <- mean(skokomishCatalase$Normalized.Area[37:54])
willapaCatalaseP1T1 <- mean(willapaCatalase$Normalized.Area[1:18])
willapaCatalaseP1T2 <- mean(willapaCatalase$Normalized.Area[19:36])
willapaCatalaseP1T3 <- mean(willapaCatalase$Normalized.Area[37:54])
caseCatalaseP1T1
catalaseP1T1 <- data.frame(Site = "Case Inlet", "Fidalgo Bay", "Port Gamble Bay", "Skokomish River", "Willapa Bay",
Area = caseCatalaseP1T1, fidalgoCatalaseP1T1, portCatalaseP1T1, skokomishCatalaseP1T1, willapaCatalaseP1T1)
barchart(catalaseP1T1)
?barchart
catalaseP1T1
View(catalaseP1T1)
catalaseP1T1 <- data.frame(x = "Case Inlet", "Fidalgo Bay", "Port Gamble Bay", "Skokomish River", "Willapa Bay",
y = caseCatalaseP1T1, fidalgoCatalaseP1T1, portCatalaseP1T1, skokomishCatalaseP1T1, willapaCatalaseP1T1)
catalaseP1T1
catalaseP1T1 <- data.frame(x = c("Case Inlet", "Fidalgo Bay", "Port Gamble Bay", "Skokomish River", "Willapa Bay"),
y = c(caseCatalaseP1T1, fidalgoCatalaseP1T1, portCatalaseP1T1, skokomishCatalaseP1T1, willapaCatalaseP1T1))
catalaseP1T1
barchart(catalaseP1T1)
catalaseP1T1 <- data.frame(Site = c("Case Inlet", "Fidalgo Bay", "Port Gamble Bay", "Skokomish River", "Willapa Bay"),
Area = c(caseCatalaseP1T1, fidalgoCatalaseP1T1, portCatalaseP1T1, skokomishCatalaseP1T1, willapaCatalaseP1T1))
barchart(catalaseP1T1)
barchart(t(catalaseP1T1))
t(catalaseP1T1)
barchart(t(catalaseP1T1))
catalaseTemp <- (t(catalaseP1T1))
barchart(catalaseTemp)
catalaseP1T1 <- data.frame(Site = c("Case Inlet", "Fidalgo Bay", "Port Gamble Bay", "Skokomish River", "Willapa Bay"),
Area = c(caseCatalaseP1T1, fidalgoCatalaseP1T1, portCatalaseP1T1, skokomishCatalaseP1T1, willapaCatalaseP1T1))
?plot
plot(catalaseP1T1, type = "h")
plot(catalaseP1T1, type = "s")
plot(catalaseP1T1, type = "p")
SRMDataBarplots <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "N/A") #Read in data
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(2, 5, 7)] #Remove extraneous columns
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC) #Normalize area
SRMDataBarplots$Protein.Peptide.Transition <- paste(SRMDataBarplots$Protein.Name, SRMDataBarplots$Peptide.Sequence, SRMDataBarplots$Fragment.Ion) #Combine protein IDs
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(2, 5, 7)] #Remove extraneous columns
head(SRMDataBarplots)
SRMDataBarplots <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "N/A") #Read in data
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(2, 5, 7)] #Remove extraneous columns
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC) #Normalize area
SRMDataBarplots$Area <- as.numeric(SRMDataBarplots$Area)
SRMDataBarplots$TIC <- as.numeric(SRMDataBarplots$TIC)
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC)
SRMDataBarplots$Protein.Peptide.Transition <- paste(SRMDataBarplots$Protein.Name, SRMDataBarplots$Peptide.Sequence, SRMDataBarplots$Fragment.Ion) #Combine protein IDs
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(3:5)] #Remove extraneous columns, but keep protein name
head(SRMDataBarplots)
attach(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[order(Protein.Name),] #Reorder by protein name
head(SRMDataBarplots)
SRMDataBarplots <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "N/A") #Read in data
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(1, 3, 6, 8)] #Remove extraneous columns
SRMDataBarplots$Area <- as.numeric(SRMDataBarplots$Area)
SRMDataBarplots$TIC <- as.numeric(SRMDataBarplots$TIC)
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC) #Normalize area
SRMDataBarplots$Protein.Peptide.Transition <- paste(SRMDataBarplots$Protein.Name, SRMDataBarplots$Peptide.Sequence, SRMDataBarplots$Fragment.Ion) #Combine protein IDs
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(3:5)] #Remove extraneous columns, but keep protein name
head(SRMDataBarplots)
attach(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[order(Protein.Name),] #Reorder by protein name
head(SRMDataBarplots)
SRMDataBarplots <- read.csv("2017-09-07-Master-SRM-Data-BiologicalReplicates-NoBlanks-NoPivot.csv", na.strings = "N/A") #Read in data
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(1, 3, 6, 8)] #Remove extraneous columns
SRMDataBarplots$Area <- as.numeric(SRMDataBarplots$Area)
SRMDataBarplots$TIC <- as.numeric(SRMDataBarplots$TIC)
SRMDataBarplots$Normalized.Area <- (SRMDataBarplots$Area)/(SRMDataBarplots$TIC) #Normalize area
SRMDataBarplots$Protein.Peptide.Transition <- paste(SRMDataBarplots$Protein.Name, SRMDataBarplots$Peptide.Sequence, SRMDataBarplots$Fragment.Ion) #Combine protein IDs
head(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[,-c(3:6)] #Remove extraneous columns, but keep protein name
head(SRMDataBarplots)
attach(SRMDataBarplots)
SRMDataBarplots <- SRMDataBarplots[order(Protein.Name),] #Reorder by protein name
head(SRMDataBarplots)
detach(SRMDataBarplots)
CaseInletBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "CI")
FidalgoBayBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "FB")
PortGambleBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "PG")
SkokomishRiverBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "SK")
WillapaBayBarplot <- s
WillapaBayBarplot <- subset(x = SRMDataBarplots, subset = SRMDataBarplots$Site == "WB")
attach(CaseInletBarplot)
CaseInletBarplot <- CaseInletBarplot[order(Protein.Peptide.Transition),] #Reorder by protein name
detach(CaseInletBarplot)
head(CaseInletBarplot) #Confirm reordering
mean(CaseInletBarplot$Normalized.Area[1:92])
caseCatalase <- subset(CaseInletBarplot, CaseInletBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120") #Subset catalase
fidalgoCatalase <- subset(FidalgoBayBarplot, FidalgoBayBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
portCatalase <- subset(PortGambleBarplot, PortGambleBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
skokomishCatalase <- subset(SkokomishRiverBarplot, SkokomishRiverBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
willapaCatalase <- subset(WillapaBayBarplot, WillapaBayBarplot$Protein.Name == "CHOYP_CATA.1.3|m.11120")
caseCatalaseP1T1 <- mean(caseCatalase$Normalized.Area[1:18]) #Average catalase values for the first peptide and first transition
fidalgoCatalaseP1T1 <- mean(fidalgoCatalase$Normalized.Area[1:18])
portCatalaseP1T1 <- mean(portCatalase$Normalized.Area[1:18])
skokomishCatalaseP1T1 <- mean(skokomishCatalase$Normalized.Area[1:18])
willapaCatalaseP1T1 <- mean(willapaCatalase$Normalized.Area[1:18])
catalaseP1T1 <- data.frame(Site = c("Case Inlet", "Fidalgo Bay", "Port Gamble Bay", "Skokomish River", "Willapa Bay"),
Area = c(caseCatalaseP1T1, fidalgoCatalaseP1T1, portCatalaseP1T1, skokomishCatalaseP1T1, willapaCatalaseP1T1))
plot(catalaseP1T1, type = "p")
plot(catalaseP1T1)
barplot(catalaseP1T1)
barplot(catalaseP1T1)
plot(catalaseP1T1)
?barplot
barplot(catalaseP1T1$Area)
barplot(catalaseP1T1$Area, xlab = catalaseP1T1$Site)
barplot(catalaseP1T1$Area)
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites")
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta", legend = TRUE))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"), legend = TRUE))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"), legend = TRUE)
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"), legend = TRUE)
legend("topright", cex = .5, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta", legend = TRUE))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"), legend = TRUE)
legend("topright", cex = .5, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
legend("topleft", cex = .5, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
legend("topleft", cex = .8, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
legend("topleft", cex = .7, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"), legend = TRUE)
legend("topleft", cex = .7, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
barplot(catalaseP1T1$Area, xlab = "Sites", ylab = "Abundance", main = "Catalase Abundance across Sites", col = c("red", "blue", "black", "green", "magenta"), legend = TRUE)
legend("topleft", cex = .5, pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble", "Skokomish River", "Willapa Bay"), col=c('red', 'blue', 'black', 'green', 'magenta'))
SRMAreas <- read.csv("2017-09-12-Gigas-SRM-ReplicatesOnly-PostDilutionCurve-NoPivot-RevisedSettings-Report.csv", na.strings = "#N/A") #Specify Skyline's special way of designating N/A values
head(SRMAreas) #Confirm import
tail(SRMAreas) #Confirm import
sequenceFile <- read.csv("2017-07-28-SRM-Samples-Sequence-File.csv", na.strings = "N/A") # Import sequence file
head(sequenceFile) #Confirm import
sequenceFile <- sequenceFile[,c(2,3,8)] #Keep the Replicate.Name, Comment and TIC columns
names(sequenceFile) <- c("Replicate.Name", "Sample.Number", "TIC")
head(sequenceFile) #Confirm change
masterSRMData <- merge(x = SRMAreas, y = sequenceFile, by = "Replicate.Name") #Merge the sample names and replicate names to use for analysis.
head(masterSRMData) #Confirm merge
tail(masterSRMData) #Confirm merge
biologicalReplicates <- read.csv("2017-09-06-Biological-Replicate-Information.csv", na.strings = "N/A") #Import site and eelgrass condition information (i.e. biological replicate information)
head(biologicalReplicates) #Confirm import
tail(biologicalReplicates) #Confirm import
masterSRMDataBiologicalReplicates <- merge(x = masterSRMData, y = biologicalReplicates, by = "Sample.Number") #Add biological replicate information to master list.
head(masterSRMDataBiologicalReplicates) #Confirm change
SRMDataNMDS <- masterSRMDataBiologicalReplicates #Duplicate master list into a new dataframe
head(SRMDataNMDS) #Confirm copy
tail(SRMDataNMDS) #Confirm copy
SRMDataNMDS <- SRMDataNMDS[,-c(2, 5, 7, 10, 11)] #Remove extraneous columns: Replicate.Name, Transition, Peptide.Retention.Time, Site, Eelgrass
head(SRMDataNMDS) #Confirm column removal
SRMDataNMDS <- SRMDataNMDS[! SRMDataNMDS$Protein.Name %in% "PRTC peptides", ] #Remove PRTC peptide data
head(SRMDataNMDS) #Confirm removal
transform(SRMDataNMDS, Area = as.numeric(Area)) #Make sure Area is recognized as a numeric variable
is.numeric(SRMDataNMDS$Area) #Confirm change
transform(SRMDataNMDS, TIC = as.numeric(TIC)) #Make sure TIC is recognized as a numeric variable
is.numeric(SRMDataNMDS$TIC) #Confirm change
SRMDataNonNormalizedNMDS <- SRMDataNMDS #Create a duplicate dataframe
SRMDataNonNormalizedNMDS <- SRMDataNMDS[,-6] #Remove TIC column
head(SRMDataNonNormalizedNMDS) #Confirm creation
library(reshape2) #Instal package to pivot table
SRMDataNMDSNonNormalizedPivoted <- dcast(SRMDataNonNormalizedNMDS, Protein.Name + Peptide.Sequence + Fragment.Ion ~ Sample.Number) #Cast table! Protein/Peptides/Transitions remain as columns with Sample Number as column headers. Normalized.Area used as value column by default.
head(SRMDataNMDSNonNormalizedPivoted) #Confirm cast.
SRMDataNMDSNonNormalizedPivoted$RowNames <- paste(SRMDataNMDSNonNormalizedPivoted$Protein.Name, SRMDataNMDSNonNormalizedPivoted$Peptide.Sequence, SRMDataNMDSNonNormalizedPivoted$Fragment.Ion) #Merge Protein, Peptide and Transition information into one column
head(SRMDataNMDSNonNormalizedPivoted) #Confirm column merge
SRMDataNMDSNonNormalizedPivoted <- SRMDataNMDSNonNormalizedPivoted[,-c(1:3)] #Remove unmerged columns
head(SRMDataNMDSNonNormalizedPivoted) #Confirm column removal
source("biostats.R") #Either load the source R script or copy paste
install.packages("vegan") #Install vegan package
library(vegan)
SRMDataNMDSNonNormalizedPivotedCorrected <- SRMDataNMDSNonNormalizedPivoted #Duplicate dataframe
SRMDataNMDSNonNormalizedPivotedCorrected[is.na(SRMDataNMDSNonNormalizedPivotedCorrected)] <- 0 #Replace NAs with 0s
head(SRMDataNMDSNonNormalizedPivotedCorrected) #Confirm there are no NAs
area.protID <- SRMDataNMDSNonNormalizedPivotedCorrected[-93] #Save all area data as a new dataframe
rownames(area.protID) <- SRMDataNMDSNonNormalizedPivotedCorrected[,93] #Make sure last column of protein names is recognized as row names instead of values
head(area.protID) #Confirm changes
head(area.protID) #Confirm changes
area.t <- t(area.protID) #Transpose the file so that rows and columns are switched
head(area.t) #Confirm transposition
area.tra <- (area.t+1) #Add 1 to all values before transforming
area.tra <- data.trans(area.tra, method = 'log', plot = FALSE) #log(x+1) transformation
proc.nmds.nonnorm.euclidean <- metaMDS(area.t, distance = 'bray', k = 2, trymax = 10000, autotransform = FALSE)
ordiplot(proc.nmds.nonnorm.euclidean, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
proc.nmds.nonnorm.euclidean <- metaMDS(area.t, distance = 'euclidean', k = 2, trymax = 10000, autotransform = FALSE) #Make MDS dissimilarity matrix using euclidean distance. Julian confirmed that I should use euclidean distances, and not bray-curtis
ordiplot(proc.nmds.nonnorm.euclidean, choices = c(1,2), type = "text", display = "sites") #Plot refined NMDS displaying only samples with their names
